* LMV7239
*****************************************************************************
* (C) Copyright 2013 Texas Instruments Incorporated. All rights reserved.
*****************************************************************************
** This model is designed as an aid for customers of Texas Instruments.
** TI and its licensors and suppliers make no warranties, either expressed
** or implied, with respect to this model, including the warranties of
** merchantability or fitness for a particular purpose.  The model is
** provided solely on an "as is" basis.  The entire risk as to its quality
** and performance is with the customer.
*****************************************************************************
*
** Released by: WEBENCH(R) Design Center, Texas Instruments Inc.
* Part: LMV7239
* Date: 4/9/2013
* Model Type: All In One
* Simulator: TINA-TI
* Simulator Version: 9.3.30.248 SF-TI
* EVM Order Number: N/A
* EVM Users Guide: N/A
* Datasheet: SNOS532M –SEPTEMBER 2000–REVISED FEBRUARY 2013
*
* Model Version: 1.0
*
*****************************************************************************
*
* Updates:
*
* Version 1.0 : Release to Web
*
*****************************************************************************
* Notes:
* 1. The parameters shown on page 3 to page 8 of the datasheet are all 
*    being modeled. 
*
* 2. If the parameters typical value is slighly different from the plot 
*    as shown on Figure 3 to Figure 17, the plot value is being used 
*
* 3. The propagation delay is modeled with various variations according 
*    to Figure 10 to Figure 17 of the datasheet
*
* 4. For accurate propagation delay over supply, it requires user to alter 
*    the .PARAM value (VDD and VSS) as well as the actual voltage 
*    supply/generator/vdc attached to to the supply pins on the test benches. 
*    The default for .PARAM VDD is 5V and .PARAM VSS is 0V.
*
* 5. For accurate propagation over Input Common Range Voltage, it requires 
*    the user to alter the .PARAM VICM that is defaulted to mid supply, 2.5V
*    If the user does not change the VICM value accordingly, the user will be
*    getting mid supply input common range propagation delay value assuming 
*    5V and 0V supply (VICM = 2.5V). 
*    
*    For most cases, it is recommended that the user sets VICM at mid supply. 
*    For instance for 2.7V, 0V supply, the user can set it to 1.35V.
*
*****************************************************************************
.SUBCKT LMV7239 Vinm Vinp VCC VEE Vout
+ PARAMS: VDD = 5.00  VSS = 0.00  VICM = 2.50

X1 VCC VEE Vinp Vinm Vout AMP
+ PARAMS: VDD = {VDD}  VSS = {VSS}  VICM = {VICM}

.ENDS


.SUBCKT  AMP  VDD VSS VIP VIM VO
+ PARAMS: VDD = 2.50  VSS = -2.50  VICM = 0.00

*VPD PD GNDF 1
*VEN EN GNDF 0


XU101 12 13 GNDF GNDF VIP VIM VDD VSS LMV7239_IBIAS_HT1

*XU101        12 13 GNDF GNDF  IBIAS_NEW
*+ PARAMS: IBIASP = 35n IBIASN = 30n
*XU101        12 13 GNDF GNDF  IBIAS_NEW2
*+ PARAMS: IBIAS = 30n IBIASOFFSET = 5n


*Vos         12 20 0
Vos         12 20 1m


XU15         VDD VSS VIMON  ILOAD_NEW
*XU15         VDD VSS VIMON PD  ILOAD_NEW_PD
*XU15         VDD VSS VIMON EN  ILOAD_NEW_EN
*+ PARAMS: VON = 0.5

*VXU1 7 8 0
XU1 7 8 VDD VSS  LMV7239_OUT_CURRENT_CLAMP_HT1

*XU1         7 8  OUT_CURRENT_CLAMP
*XU1         7 8 PD  OUT_CURRENT_CLAMP_PD
*XU1         7 8 EN  OUT_CURRENT_CLAMP_EN
*+ PARAMS: RSER = 0.1 ROFF = 1G VON = 0.5 IMAX = 55m IMIN = 60m

*Check impact of inductor on this
*RXU9 9 7 75
*LXU9 9 7 1n
LXU9 9 7a 0.5n
RXU9 7a 7 2.5

*VXU9 9 7 0
*XU9         9 7 GNDF ZOUT_1
*+ PARAMS: FZ1 = 10G FZ2 = 10G FZ3 = 10G FP1 = 10G FP2 = 10G FEQ = 10G RO = 0.016

VXU100 10 10a 0



*VXU5 10a 9 0
*EXU5 9 0 VALUE = { V(10a) }
XU5    VDD VSS 10a 9 VIMON GNDF VOHVOL
*XU5         VDD VSS 10a 9 VIMON GNDF VDD_CLP VSS_CLP VCLAMP_W_CLAW
*+ PARAMS: VMAXIO = 0.15 VMINIO = 0.25 SLOPE = 0

VXU10 11 10 0
*XU10         11 10 GNDF TF
*+ PARAMS: FZ1 = 1000G FZ2 = 1000G FZ3 = 1000G FZ4 = 1000G
*+  FZ5 = 1000G FP1 = 1000G FP2 = 1000G FP3 = 1000G FP4 = 1000G

XU13         VDD VSS 12 13 14 15 GNDF CMR
+ PARAMS: VMAX = -0.2 VMIN = -0.2

XU11         VDD VSS GNDF GND_FLOAT_NEW

*EXU14 11 GNDF 14 15 1
XU14 14 15 11 GNDF VDD VSS LMV7239_MAIN_HT1
+ PARAMS: VDD = {VDD}  VSS = {VSS}  VICM = {VICM}

*XU14        14 15 11 GNDF  GBW_SLEW_SE_TANH
*+ PARAMS: AOL = 78 GBW = 9800MEG SRP = 5000MEG SRN = 5000MEG IT = 1M TANHONOFF=0





XU12 	VDD VSS  LMV7239_IQ_HT1

*XU12         VDD VSS  IQ
*XU12         VDD VSS PD  IQ_PD
*XU12         VDD VSS EN  IQ_EN
*+ PARAMS: VON = 0.5 IQQ = 65u  IOFF = 1p



*XD4         VSS 13 IDEAL_DIODE
*+ PARAMS: EMCO = 0.01 BRKV = 60 IBRKV = 1M
*XD3         13 VDD IDEAL_DIODE
*+ PARAMS: EMCO = 0.01 BRKV = 60 IBRKV = 1M
*XD2         VSS 12 IDEAL_DIODE
*+ PARAMS: EMCO = 0.01 BRKV = 60 IBRKV = 1M
*XD1         12 VDD IDEAL_DIODE
*+ PARAMS: EMCO = 0.01 BRKV = 60 IBRKV = 1M

XU6         8 VO VIMON AMETER
+ PARAMS: GAIN = 1


*VXU8 21 13 0
XU8         21 13 GNDF CMRR
+ PARAMS: CMRR = 65 FCMRR = 10000k

*VXU7 22 21 0
XU7       VDD VSS 22 21 GNDF PSRR
+ PARAMS: PSRRP = 85 FPSRRP = 10000k
+ PSRRN = 85 FPSRRN = 10000k

*XU4         20 22 FEMT
*+ PARAMS: NLFF = 3E3 FLWF = 100k NVRF = 2.1E3

VXU3 23 20 0
*XU3         23 20 VNSE
*+ PARAMS: NLF = 3 FLW = 100k NVR = 2.4

*RXU2a VIP 23 1u
*RXU2b VIM 22 1u
*VXU2a VIP 23 0
*VXU2b VIM 22 0
XU2         VIP VIM 23 22 GNDF INPUT_NEW
+ PARAMS: RCM = 0.1 CCM = 1f CDM = 1f
* PARAMS: AOL = 78 GBW = 9800MEG SRP = 5000MEG SRN = 5000MEG IT = 1M TANHONOFF=0
.ENDS

****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
.SUBCKT LMV7239_IQ_HT1 VDD VSS

.PARAM TEMP_ABCDEF_X1 = {-40}
.PARAM TEMP_ABCDEF_X2 = {125}

.PARAM TEMP_A_Y1 = {2.2}
.PARAM TEMP_A_Y2 = {1.1}

.PARAM TEMP_B_Y1 = {1p}
.PARAM TEMP_B_Y2 = {1p}

.PARAM TEMP_C_Y1 = {2.5}
.PARAM TEMP_C_Y2 = {1.4}

.PARAM TEMP_D_Y1 = {42u}
.PARAM TEMP_D_Y2 = {77u}

.PARAM TEMP_E_Y1 = {5}
.PARAM TEMP_E_Y2 = {5}

.PARAM TEMP_F_Y1 = {51u}
.PARAM TEMP_F_Y2 = {103u}


.PARAM TEMP_A_SLOPE = { ( TEMP_A_Y2-TEMP_A_Y1 ) / ( TEMP_ABCDEF_X2-TEMP_ABCDEF_X1 ) }
.PARAM TEMP_A_INTCP = { TEMP_A_Y1 - TEMP_A_SLOPE * TEMP_ABCDEF_X1 }

.PARAM TEMP_B_SLOPE = { ( TEMP_B_Y2-TEMP_B_Y1 ) / ( TEMP_ABCDEF_X2-TEMP_ABCDEF_X1 ) }
.PARAM TEMP_B_INTCP = { TEMP_B_Y1 - TEMP_B_SLOPE * TEMP_ABCDEF_X1 }

.PARAM TEMP_C_SLOPE = { ( TEMP_C_Y2-TEMP_C_Y1 ) / ( TEMP_ABCDEF_X2-TEMP_ABCDEF_X1 ) }
.PARAM TEMP_C_INTCP = { TEMP_C_Y1 - TEMP_C_SLOPE * TEMP_ABCDEF_X1 }

.PARAM TEMP_D_SLOPE = { ( TEMP_D_Y2-TEMP_D_Y1 ) / ( TEMP_ABCDEF_X2-TEMP_ABCDEF_X1 ) }
.PARAM TEMP_D_INTCP = { TEMP_D_Y1 - TEMP_D_SLOPE * TEMP_ABCDEF_X1 }

.PARAM TEMP_E_SLOPE = { ( TEMP_E_Y2-TEMP_E_Y1 ) / ( TEMP_ABCDEF_X2-TEMP_ABCDEF_X1 ) }
.PARAM TEMP_E_INTCP = { TEMP_E_Y1 - TEMP_E_SLOPE * TEMP_ABCDEF_X1 }

.PARAM TEMP_F_SLOPE = { ( TEMP_F_Y2-TEMP_F_Y1 ) / ( TEMP_ABCDEF_X2-TEMP_ABCDEF_X1 ) }
.PARAM TEMP_F_INTCP = { TEMP_F_Y1 - TEMP_F_SLOPE * TEMP_ABCDEF_X1 }


.PARAM X1 = { TEMP_A_SLOPE * TEMP + TEMP_A_INTCP }
.PARAM Y1 = { TEMP_B_SLOPE * TEMP + TEMP_B_INTCP }

.PARAM X2 = { TEMP_C_SLOPE * TEMP + TEMP_C_INTCP }
.PARAM Y2 = { TEMP_D_SLOPE * TEMP + TEMP_D_INTCP }

.PARAM X3 = { TEMP_E_SLOPE * TEMP + TEMP_E_INTCP }
.PARAM Y3 = { TEMP_F_SLOPE * TEMP + TEMP_F_INTCP }


EREG1 REG1 0 VALUE = { IF ( V(VDD,VSS)           	 <= X1, 1, 0 ) }
EREG2 REG2 0 VALUE = { IF ( V(VDD,VSS) > X1 & V(VDD,VSS) <= X2, 1, 0 ) }
EREG3 REG3 0 VALUE = { IF ( V(VDD,VSS) > X2		      , 1, 0 ) }


.PARAM REG2_SLOPE = { ( Y2-Y1 ) / ( X2-X1 ) }
.PARAM REG2_INTCP = { Y1 - REG2_SLOPE * X1 }

.PARAM REG3_SLOPE = { ( Y3-Y2 ) / ( X3-X2 ) }
.PARAM REG3_INTCP = { Y2 - REG3_SLOPE * X2 }


G1 VDD VSS VALUE = { V(REG1) * Y1 					+
+                    V(REG2) * ( REG2_SLOPE * V(VDD,VSS) + REG2_INTCP )	+
+ 		     V(REG3) * ( REG3_SLOPE * V(VDD,VSS) + REG3_INTCP )		}



.ENDS



.SUBCKT LMV7239_OUT_CURRENT_CLAMP_HT1 IN OUT VDD VSS

.PARAM ISOURCE_X1 = {2.7}
.PARAM ISOURCE_Y1 = {15m}

.PARAM ISOURCE_X2 = {5.0}
.PARAM ISOURCE_Y2 = {55m}

.PARAM ISINK_X1 = {2.7}
.PARAM ISINK_Y1 = {20m}

.PARAM ISINK_X2 = {5.0}
.PARAM ISINK_Y2 = {60m}


.PARAM ISOURCE_SLOPE = { ( ISOURCE_Y2-ISOURCE_Y1 ) / ( ISOURCE_X2-ISOURCE_X1 ) }
.PARAM ISOURCE_INTCP = { ISOURCE_Y1 - ISOURCE_SLOPE * ISOURCE_X1 }

.PARAM ISINK_SLOPE = { ( ISINK_Y2-ISINK_Y1 ) / ( ISINK_X2-ISINK_X1 ) }
.PARAM ISINK_INTCP = { ISINK_Y1 - ISINK_SLOPE * ISINK_X1 }

EISOURCE ISOURCE 0 VALUE = { ISOURCE_SLOPE * V(VDD,VSS) + ISOURCE_INTCP   }
EISINK   ISINK   0 VALUE = { ISINK_SLOPE   * V(VDD,VSS) + ISINK_INTCP     }

EVTHRES VTHRES 0 VALUE = { IF ( V(VDD,VSS) < 1.9, 0, 1 ) }

.PARAM RSER = 0.1

GRES IN OUT VALUE = { V(VTHRES) * LIMIT( V(IN,OUT)/RSER, V(ISOURCE),-V(ISINK) ) }

.ENDS




.SUBCKT LMV7239_IBIAS_HT1 VIP  VIM  NODE1  NODE2 VIP_ORIG VIM_ORIG VDD VSS

EOD OD 0 VALUE = { V(VIP_ORIG,VIM_ORIG) }

EREG1 REG1 0 VALUE = { IF ( V(OD)            		       <= 0.6		    , 1, 0 ) }
EREG2 REG2 0 VALUE = { IF ( V(OD) > 0.6 	       & V(OD) <= 0.8		    , 1, 0 ) }
EREG3 REG3 0 VALUE = { IF ( V(OD) > 0.8 	       & V(OD) <= ( V(VDD,VSS)-0.8 ), 1, 0 ) }
EREG4 REG4 0 VALUE = { IF ( V(OD) > ( V(VDD,VSS)-0.8 ) & V(OD) <= ( V(VDD,VSS)-0.6 ), 1, 0 ) }
EREG5 REG5 0 VALUE = { IF ( V(OD) > ( V(VDD,VSS)-0.6 ) 				    , 1, 0 ) }


.PARAM ABCDEF_X1 = { 2.7 }
.PaRAM ABCDEF_X2 = { 5.0 }

.PARAM A_Y1 = { -30n }
.PARAM A_Y2 = { -38n }

.PARAM B_Y1 = { -22n }
.PARAM B_Y2 = { -31n }

.PARAM C_Y1 = {   0  }
.PARAM C_Y2 = { -13n }

.PARAM D_Y1 = {   8n }
.PARAM D_Y2 = {  14n }

.PARAM E_Y1 = {  27n }
.PARAM E_Y2 = {  30n }

.PARAM F_Y1 = {  28n }
.PARAM F_Y2 = {  31n }


.PARAM A_SLOPE = { ( A_Y2-A_Y1 ) / ( ABCDEF_X2-ABCDEF_X1 ) }
.PARAM A_INTCP = { A_Y1 - A_SLOPE * ABCDEF_X1 }

.PARAM B_SLOPE = { ( B_Y2-B_Y1 ) / ( ABCDEF_X2-ABCDEF_X1 ) }
.PARAM B_INTCP = { B_Y1 - B_SLOPE * ABCDEF_X1 }

.PARAM C_SLOPE = { ( C_Y2-C_Y1 ) / ( ABCDEF_X2-ABCDEF_X1 ) }
.PARAM C_INTCP = { C_Y1 - C_SLOPE * ABCDEF_X1 }

.PARAM D_SLOPE = { ( D_Y2-D_Y1 ) / ( ABCDEF_X2-ABCDEF_X1 ) }
.PARAM D_INTCP = { D_Y1 - D_SLOPE * ABCDEF_X1 }

.PARAM E_SLOPE = { ( E_Y2-E_Y1 ) / ( ABCDEF_X2-ABCDEF_X1 ) }
.PARAM E_INTCP = { E_Y1 - E_SLOPE * ABCDEF_X1 }

.PARAM F_SLOPE = { ( F_Y2-F_Y1 ) / ( ABCDEF_X2-ABCDEF_X1 ) }
.PARAM F_INTCP = { F_Y1 - F_SLOPE * ABCDEF_X1 }


EX1 X1 0 VALUE = { -0.2 }
EY1 Y1 0 VALUE = { A_SLOPE * V(VDD,VSS) + A_INTCP }

EX2 X2 0 VALUE = { 0.6 }
EY2 Y2 0 VALUE = { B_SLOPE * V(VDD,VSS) + B_INTCP }

EX3 X3 0 VALUE = { 0.8 }
EY3 Y3 0 VALUE = { C_SLOPE * V(VDD,VSS) + C_INTCP }

EX4 X4 0 VALUE = { V(VDD,VSS) - 0.8 }
EY4 Y4 0 VALUE = { D_SLOPE * V(VDD,VSS) + D_INTCP }

EX5 X5 0 VALUE = { V(VDD,VSS) - 0.6 }
EY5 Y5 0 VALUE = { E_SLOPE * V(VDD,VSS) + E_INTCP }

EX6 X6 0 VALUE = { V(VDD,VSS) }
EY6 Y6 0 VALUE = { F_SLOPE * V(VDD,VSS) + F_INTCP }


EREG1_SLOPE REG1_SLOPE 0 VALUE = { ( V(Y2)-V(Y1) ) / ( V(X2)-V(X1) ) }
EREG1_INTCP REG1_INTCP 0 VALUE = { V(Y1) - V(REG1_SLOPE) * V(X1) }

EREG2_SLOPE REG2_SLOPE 0 VALUE = { ( V(Y3)-V(Y2) ) / ( V(X3)-V(X2) ) }
EREG2_INTCP REG2_INTCP 0 VALUE = { V(Y2) - V(REG2_SLOPE) * V(X2) }

EREG3_SLOPE REG3_SLOPE 0 VALUE = { ( V(Y4)-V(Y3) ) / ( V(X4)-V(X3) ) }
EREG3_INTCP REG3_INTCP 0 VALUE = { V(Y3) - V(REG3_SLOPE) * V(X3) }

EREG4_SLOPE REG4_SLOPE 0 VALUE = { ( V(Y5)-V(Y4) ) / ( V(X5)-V(X4) ) }
EREG4_INTCP REG4_INTCP 0 VALUE = { V(Y4) - V(REG4_SLOPE) * V(X4) }

EREG5_SLOPE REG5_SLOPE 0 VALUE = { ( V(Y6)-V(Y5) ) / ( V(X6)-V(X5) ) }
EREG5_INTCP REG5_INTCP 0 VALUE = { V(Y5) - V(REG5_SLOPE) * V(X5) }



EIBIAS IBIAS 0 VALUE = { V(REG1) * ( V(REG1_SLOPE) * V(OD) + V(REG1_INTCP) ) +
+			 V(REG2) * ( V(REG2_SLOPE) * V(OD) + V(REG2_INTCP) ) +
+			 V(REG3) * ( V(REG3_SLOPE) * V(OD) + V(REG3_INTCP) ) +
+			 V(REG4) * ( V(REG4_SLOPE) * V(OD) + V(REG4_INTCP) ) +
+			 V(REG5) * ( V(REG5_SLOPE) * V(OD) + V(REG5_INTCP) ) 	 }

.PARAM IBIASOFFSET = {2n}


EIBIASP IBIASP 0 VALUE = { V(IBIAS) + IBIASOFFSET/2 }
EIBIASN IBIASN 0 VALUE = { V(IBIAS) - IBIASOFFSET/2 }

GIBP  VIP NODE1 VALUE = { V(IBIASP) }
GIBN  VIM NODE2 VALUE = { V(IBIASN) }


.ENDS




*0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789

.SUBCKT LMV7239_MAIN_HT1  VIP  VIM  VO  GNDF VDD VSS
+ PARAMS: VDD = 2.50  VSS = -2.50  VICM = 0.00


*The TPD data are calibrated at 5V, 20mV, 15pF, 25 Cel, Mid Supply VICM
.PARAM VDDVSS ={ VDD - VSS }

.PARAM VDDVSSTPD_X1 = { 2.7 }
.PARAM VDDVSSTPD_Y1 = { 8n  }

.PARAM VDDVSSTPD_X2 = { 5.0 }
.PARAM VDDVSSTPD_Y2 = { 0n  }

.PARAM VDDVSSTPD_SLOPE = { ( VDDVSSTPD_Y2-VDDVSSTPD_Y1 ) / ( VDDVSSTPD_X2-VDDVSSTPD_X1 ) }
.PARAM VDDVSSTPD_INTCP ={ VDDVSSTPD_Y1 - VDDVSSTPD_SLOPE * VDDVSSTPD_X1 }

.PARAM VDDVSSTPD  = { VDDVSSTPD_SLOPE * VDDVSS + VDDVSSTPD_INTCP   }
.PARAM TPD_VDDVSS = { VDDVSSTPD }




.PARAM VICMTPDH_X1 = { VSS + 0.000 }
.PARAM VICMTPDH_Y1 = {   88n - 89n }

.PARAM VICMTPDH_X2 = { VSS + 0.125 }
.PARAM VICMTPDH_Y2 = {   99n - 89n }

.PARAM VICMTPDH_X3 = { VSS + 0.500 }
.PARAM VICMTPDH_Y3 = {   99n - 89n }

.PARAM VICMTPDH_X4 = { VSS + 0.700 }
.PARAM VICMTPDH_Y4 = {   86n - 89n }

.PARAM VICMTPDH_X5 = { VSS + 0.900 }
.PARAM VICMTPDH_Y5 = {   89n - 89n }

.PARAM VICMTPDH_X6 = { VDD - 0.800 }
.PARAM VICMTPDH_Y6 = {   89n - 89n }

.PARAM VICMTPDH_X7 = { VDD - 0.600 }
.PARAM VICMTPDH_Y7 = {  102n - 89n }

.PARAM VICMTPDH_X8 = { VDD - 0.500 }
.PARAM VICMTPDH_Y8 = {   95n - 89n }

.PARAM VICMTPDH_X9 = { VDD - 0.000 }
.PARAM VICMTPDH_Y9 = {   95n - 89n }



.PARAM VICMTPDH_REG1_SLOPE = { ( VICMTPDH_Y2-VICMTPDH_Y1 ) / ( VICMTPDH_X2-VICMTPDH_X1 ) }
.PARAM VICMTPDH_REG1_INTCP = { VICMTPDH_Y1 - VICMTPDH_REG1_SLOPE * VICMTPDH_X1 }

.PARAM VICMTPDH_REG2_SLOPE = { ( VICMTPDH_Y3-VICMTPDH_Y2 ) / ( VICMTPDH_X3-VICMTPDH_X2 ) }
.PARAM VICMTPDH_REG2_INTCP = { VICMTPDH_Y2 - VICMTPDH_REG2_SLOPE * VICMTPDH_X2 }

.PARAM VICMTPDH_REG3_SLOPE = { ( VICMTPDH_Y4-VICMTPDH_Y3 ) / ( VICMTPDH_X4-VICMTPDH_X3 ) }
.PARAM VICMTPDH_REG3_INTCP = { VICMTPDH_Y3 - VICMTPDH_REG3_SLOPE * VICMTPDH_X3 }

.PARAM VICMTPDH_REG4_SLOPE = { ( VICMTPDH_Y5-VICMTPDH_Y4 ) / ( VICMTPDH_X5-VICMTPDH_X4 ) }
.PARAM VICMTPDH_REG4_INTCP = { VICMTPDH_Y4 - VICMTPDH_REG4_SLOPE * VICMTPDH_X4 }

.PARAM VICMTPDH_REG5_SLOPE = { ( VICMTPDH_Y6-VICMTPDH_Y5 ) / ( VICMTPDH_X6-VICMTPDH_X5 ) }
.PARAM VICMTPDH_REG5_INTCP = { VICMTPDH_Y5 - VICMTPDH_REG5_SLOPE * VICMTPDH_X5 }

.PARAM VICMTPDH_REG6_SLOPE = { ( VICMTPDH_Y7-VICMTPDH_Y6 ) / ( VICMTPDH_X7-VICMTPDH_X6 ) }
.PARAM VICMTPDH_REG6_INTCP = { VICMTPDH_Y6 - VICMTPDH_REG6_SLOPE * VICMTPDH_X6 }

.PARAM VICMTPDH_REG7_SLOPE = { ( VICMTPDH_Y8-VICMTPDH_Y7 ) / ( VICMTPDH_X8-VICMTPDH_X7 ) }
.PARAM VICMTPDH_REG7_INTCP = { VICMTPDH_Y7 - VICMTPDH_REG7_SLOPE * VICMTPDH_X7 }

.PARAM VICMTPDH_REG8_SLOPE = { ( VICMTPDH_Y9-VICMTPDH_Y8 ) / ( VICMTPDH_X9-VICMTPDH_X8 ) }
.PARAM VICMTPDH_REG8_INTCP = { VICMTPDH_Y8 - VICMTPDH_REG8_SLOPE * VICMTPDH_X8 }



.PARAM VICMTPDH_REG1 = { IF ( 		 	   VICM <= VICMTPDH_X2, 1, 0 ) }
.PARAM VICMTPDH_REG2 = { IF ( VICM > VICMTPDH_X2 & VICM <= VICMTPDH_X3, 1, 0 ) }
.PARAM VICMTPDH_REG3 = { IF ( VICM > VICMTPDH_X3 & VICM <= VICMTPDH_X4, 1, 0 ) }
.PARAM VICMTPDH_REG4 = { IF ( VICM > VICMTPDH_X4 & VICM <= VICMTPDH_X5, 1, 0 ) }
.PARAM VICMTPDH_REG5 = { IF ( VICM > VICMTPDH_X5 & VICM <= VICMTPDH_X6, 1, 0 ) }
.PARAM VICMTPDH_REG6 = { IF ( VICM > VICMTPDH_X6 & VICM <= VICMTPDH_X7, 1, 0 ) }
.PARAM VICMTPDH_REG7 = { IF ( VICM > VICMTPDH_X7 & VICM <= VICMTPDH_X8, 1, 0 ) }
.PARAM VICMTPDH_REG8 = { IF ( VICM > VICMTPDH_X8		      , 1, 0 ) }



.PARAM VICMTPDH = {
+ VICMTPDH_REG1 * ( VICMTPDH_REG1_SLOPE * VICM + VICMTPDH_REG1_INTCP ) +
+ VICMTPDH_REG2 * ( VICMTPDH_REG2_SLOPE * VICM + VICMTPDH_REG2_INTCP ) +
+ VICMTPDH_REG3 * ( VICMTPDH_REG3_SLOPE * VICM + VICMTPDH_REG3_INTCP ) +
+ VICMTPDH_REG4 * ( VICMTPDH_REG4_SLOPE * VICM + VICMTPDH_REG4_INTCP ) +
+ VICMTPDH_REG5 * ( VICMTPDH_REG5_SLOPE * VICM + VICMTPDH_REG5_INTCP ) +
+ VICMTPDH_REG6 * ( VICMTPDH_REG6_SLOPE * VICM + VICMTPDH_REG6_INTCP ) +
+ VICMTPDH_REG7 * ( VICMTPDH_REG7_SLOPE * VICM + VICMTPDH_REG7_INTCP ) +
+ VICMTPDH_REG8 * ( VICMTPDH_REG8_SLOPE * VICM + VICMTPDH_REG8_INTCP ) +
+ 0			  }

.PARAM TPDH_VICM = { VICMTPDH }




*Blue Falling edge plot
.PARAM VICMTPDL_X1 = { VSS + 0.000 }
.PARAM VICMTPDL_Y1 = {   99n - 89n }

.PARAM VICMTPDL_X2 = { VSS + 0.500 }
.PARAM VICMTPDL_Y2 = {   99n - 89n }

.PARAM VICMTPDL_X3 = { VSS + 0.700 }
.PARAM VICMTPDL_Y3 = {  108n - 89n }

.PARAM VICMTPDL_X4 = { VSS + 0.900 }
.PARAM VICMTPDL_Y4 = {   89n - 89n }

.PARAM VICMTPDL_X5 = { VDD - 0.800 }
.PARAM VICMTPDL_Y5 = {   89n - 89n }

.PARAM VICMTPDL_X6 = { VDD - 0.700 }
.PARAM VICMTPDL_Y6 = {   83n - 89n }

.PARAM VICMTPDL_X7 = { VDD - 0.500 }
.PARAM VICMTPDL_Y7 = {   92n - 89n }

.PARAM VICMTPDL_X8 = { VDD - 0.100 }
.PARAM VICMTPDL_Y8 = {   92n - 89n }

.PARAM VICMTPDL_X9 = { VDD - 0.000 }
.PARAM VICMTPDL_Y9 = {   80n - 89n }



.PARAM VICMTPDL_REG1_SLOPE = { ( VICMTPDL_Y2-VICMTPDL_Y1 ) / ( VICMTPDL_X2-VICMTPDL_X1 ) }
.PARAM VICMTPDL_REG1_INTCP = { VICMTPDL_Y1 - VICMTPDL_REG1_SLOPE * VICMTPDL_X1 }

.PARAM VICMTPDL_REG2_SLOPE = { ( VICMTPDL_Y3-VICMTPDL_Y2 ) / ( VICMTPDL_X3-VICMTPDL_X2 ) }
.PARAM VICMTPDL_REG2_INTCP = { VICMTPDL_Y2 - VICMTPDL_REG2_SLOPE * VICMTPDL_X2 }

.PARAM VICMTPDL_REG3_SLOPE = { ( VICMTPDL_Y4-VICMTPDL_Y3 ) / ( VICMTPDL_X4-VICMTPDL_X3 ) }
.PARAM VICMTPDL_REG3_INTCP = { VICMTPDL_Y3 - VICMTPDL_REG3_SLOPE * VICMTPDL_X3 }

.PARAM VICMTPDL_REG4_SLOPE = { ( VICMTPDL_Y5-VICMTPDL_Y4 ) / ( VICMTPDL_X5-VICMTPDL_X4 ) }
.PARAM VICMTPDL_REG4_INTCP = { VICMTPDL_Y4 - VICMTPDL_REG4_SLOPE * VICMTPDL_X4 }

.PARAM VICMTPDL_REG5_SLOPE = { ( VICMTPDL_Y6-VICMTPDL_Y5 ) / ( VICMTPDL_X6-VICMTPDL_X5 ) }
.PARAM VICMTPDL_REG5_INTCP = { VICMTPDL_Y5 - VICMTPDL_REG5_SLOPE * VICMTPDL_X5 }

.PARAM VICMTPDL_REG6_SLOPE = { ( VICMTPDL_Y7-VICMTPDL_Y6 ) / ( VICMTPDL_X7-VICMTPDL_X6 ) }
.PARAM VICMTPDL_REG6_INTCP = { VICMTPDL_Y6 - VICMTPDL_REG6_SLOPE * VICMTPDL_X6 }

.PARAM VICMTPDL_REG7_SLOPE = { ( VICMTPDL_Y8-VICMTPDL_Y7 ) / ( VICMTPDL_X8-VICMTPDL_X7 ) }
.PARAM VICMTPDL_REG7_INTCP = { VICMTPDL_Y7 - VICMTPDL_REG7_SLOPE * VICMTPDL_X7 }

.PARAM VICMTPDL_REG8_SLOPE = { ( VICMTPDL_Y9-VICMTPDL_Y8 ) / ( VICMTPDL_X9-VICMTPDL_X8 ) }
.PARAM VICMTPDL_REG8_INTCP = { VICMTPDL_Y8 - VICMTPDL_REG8_SLOPE * VICMTPDL_X8 }



.PARAM VICMTPDL_REG1 = { IF ( 		 	   VICM <= VICMTPDL_X2, 1, 0 ) }
.PARAM VICMTPDL_REG2 = { IF ( VICM > VICMTPDL_X2 & VICM <= VICMTPDL_X3, 1, 0 ) }
.PARAM VICMTPDL_REG3 = { IF ( VICM > VICMTPDL_X3 & VICM <= VICMTPDL_X4, 1, 0 ) }
.PARAM VICMTPDL_REG4 = { IF ( VICM > VICMTPDL_X4 & VICM <= VICMTPDL_X5, 1, 0 ) }
.PARAM VICMTPDL_REG5 = { IF ( VICM > VICMTPDL_X5 & VICM <= VICMTPDL_X6, 1, 0 ) }
.PARAM VICMTPDL_REG6 = { IF ( VICM > VICMTPDL_X6 & VICM <= VICMTPDL_X7, 1, 0 ) }
.PARAM VICMTPDL_REG7 = { IF ( VICM > VICMTPDL_X7 & VICM <= VICMTPDL_X8, 1, 0 ) }
.PARAM VICMTPDL_REG8 = { IF ( VICM > VICMTPDL_X8		      , 1, 0 ) }



.PARAM VICMTPDL = {
+ VICMTPDL_REG1 * ( VICMTPDL_REG1_SLOPE * VICM + VICMTPDL_REG1_INTCP ) +
+ VICMTPDL_REG2 * ( VICMTPDL_REG2_SLOPE * VICM + VICMTPDL_REG2_INTCP ) +
+ VICMTPDL_REG3 * ( VICMTPDL_REG3_SLOPE * VICM + VICMTPDL_REG3_INTCP ) +
+ VICMTPDL_REG4 * ( VICMTPDL_REG4_SLOPE * VICM + VICMTPDL_REG4_INTCP ) +
+ VICMTPDL_REG5 * ( VICMTPDL_REG5_SLOPE * VICM + VICMTPDL_REG5_INTCP ) +
+ VICMTPDL_REG6 * ( VICMTPDL_REG6_SLOPE * VICM + VICMTPDL_REG6_INTCP ) +
+ VICMTPDL_REG7 * ( VICMTPDL_REG7_SLOPE * VICM + VICMTPDL_REG7_INTCP ) +
+ VICMTPDL_REG8 * ( VICMTPDL_REG8_SLOPE * VICM + VICMTPDL_REG8_INTCP ) +
+ 0			  }

.PARAM TPDL_VICM = { VICMTPDL }
*.PARAM TPDL_VICM = { 0n }


X1 VIP VIM VO GNDF VDD VSS DELAYTOPMINUS1
+ PARAMS: TPDH_ADD = { TPD_VDDVSS + TPDH_VICM }  TPDL_ADD = { TPD_VDDVSS + TPDL_VICM }

*EVO VO 0 VALUE = { TPDL_VICM }



.ENDS




.SUBCKT DELAYTOPMINUS1 VIP VIM VO GNDF VDD VSS
+ PARAMS: TPDH_ADD = 0n TPDL_ADD = 0n

*EVO_INT1 VO_INT1 0 VALUE = { IF ( V(VIP,VIM) >= 0, V(VDD), V(VSS) )  }
EVO_INT1 VO_INT1 0 VALUE = { LIMIT ( V(VIP,VIM) * 10000 , V(VDD), V(VSS) ) }

EVODSIGN VODSIGN 0 VALUE = { IF ( V(VIP,VIM) >= 0  , 1, 0 ) }

XVOD_20mV_TPDH VO_INT1 VOD_20mV_TPDH DELAY PARAMS: TPD = { 89.00n + TPDH_ADD }
XVOD_20mV_TPDL VO_INT1 VOD_20mV_TPDL DELAY PARAMS: TPD = { 89.00n + TPDL_ADD }

XVOD_21mV_TPDH VO_INT1 VOD_21mV_TPDH DELAY PARAMS: TPD = { 88.87n + TPDH_ADD }
XVOD_21mV_TPDL VO_INT1 VOD_21mV_TPDL DELAY PARAMS: TPD = { 88.75n + TPDL_ADD }

XVOD_22mV_TPDH VO_INT1 VOD_22mV_TPDH DELAY PARAMS: TPD = { 88.74n + TPDH_ADD }
XVOD_22mV_TPDL VO_INT1 VOD_22mV_TPDL DELAY PARAMS: TPD = { 88.50n + TPDL_ADD }

XVOD_23mV_TPDH VO_INT1 VOD_23mV_TPDH DELAY PARAMS: TPD = { 88.61n + TPDH_ADD }
XVOD_23mV_TPDL VO_INT1 VOD_23mV_TPDL DELAY PARAMS: TPD = { 88.25n + TPDL_ADD }

XVOD_24mV_TPDH VO_INT1 VOD_24mV_TPDH DELAY PARAMS: TPD = { 88.48n + TPDH_ADD }
XVOD_24mV_TPDL VO_INT1 VOD_24mV_TPDL DELAY PARAMS: TPD = { 88.00n + TPDL_ADD }

XVOD_25mV_TPDH VO_INT1 VOD_25mV_TPDH DELAY PARAMS: TPD = { 88.35n + TPDH_ADD }
XVOD_25mV_TPDL VO_INT1 VOD_25mV_TPDL DELAY PARAMS: TPD = { 87.75n + TPDL_ADD }

XVOD_26mV_TPDH VO_INT1 VOD_26mV_TPDH DELAY PARAMS: TPD = { 88.22n + TPDH_ADD }
XVOD_26mV_TPDL VO_INT1 VOD_26mV_TPDL DELAY PARAMS: TPD = { 87.50n + TPDL_ADD }

XVOD_27mV_TPDH VO_INT1 VOD_27mV_TPDH DELAY PARAMS: TPD = { 88.09n + TPDH_ADD }
XVOD_27mV_TPDL VO_INT1 VOD_27mV_TPDL DELAY PARAMS: TPD = { 87.25n + TPDL_ADD }

XVOD_28mV_TPDH VO_INT1 VOD_28mV_TPDH DELAY PARAMS: TPD = { 87.96n + TPDH_ADD }
XVOD_28mV_TPDL VO_INT1 VOD_28mV_TPDL DELAY PARAMS: TPD = { 87.00n + TPDL_ADD }

XVOD_29mV_TPDH VO_INT1 VOD_29mV_TPDH DELAY PARAMS: TPD = { 87.83n + TPDH_ADD }
XVOD_29mV_TPDL VO_INT1 VOD_29mV_TPDL DELAY PARAMS: TPD = { 86.75n + TPDL_ADD }


XVOD_30mV_TPDH VO_INT1 VOD_30mV_TPDH DELAY PARAMS: TPD = { 87.70n + TPDH_ADD }
XVOD_30mV_TPDL VO_INT1 VOD_30mV_TPDL DELAY PARAMS: TPD = { 86.50n + TPDL_ADD }

XVOD_31mV_TPDH VO_INT1 VOD_31mV_TPDH DELAY PARAMS: TPD = { 87.57n + TPDH_ADD }
XVOD_31mV_TPDL VO_INT1 VOD_31mV_TPDL DELAY PARAMS: TPD = { 86.25n + TPDL_ADD }

XVOD_32mV_TPDH VO_INT1 VOD_32mV_TPDH DELAY PARAMS: TPD = { 87.44n + TPDH_ADD }
XVOD_32mV_TPDL VO_INT1 VOD_32mV_TPDL DELAY PARAMS: TPD = { 86.00n + TPDL_ADD }

XVOD_33mV_TPDH VO_INT1 VOD_33mV_TPDH DELAY PARAMS: TPD = { 87.31n + TPDH_ADD }
XVOD_33mV_TPDL VO_INT1 VOD_33mV_TPDL DELAY PARAMS: TPD = { 85.75n + TPDL_ADD }

XVOD_34mV_TPDH VO_INT1 VOD_34mV_TPDH DELAY PARAMS: TPD = { 87.18n + TPDH_ADD }
XVOD_34mV_TPDL VO_INT1 VOD_34mV_TPDL DELAY PARAMS: TPD = { 85.50n + TPDL_ADD }

XVOD_35mV_TPDH VO_INT1 VOD_35mV_TPDH DELAY PARAMS: TPD = { 87.05n + TPDH_ADD }
XVOD_35mV_TPDL VO_INT1 VOD_35mV_TPDL DELAY PARAMS: TPD = { 85.25n + TPDL_ADD }

XVOD_36mV_TPDH VO_INT1 VOD_36mV_TPDH DELAY PARAMS: TPD = { 86.92n + TPDH_ADD }
XVOD_36mV_TPDL VO_INT1 VOD_36mV_TPDL DELAY PARAMS: TPD = { 85.00n + TPDL_ADD }

XVOD_37mV_TPDH VO_INT1 VOD_37mV_TPDH DELAY PARAMS: TPD = { 86.79n + TPDH_ADD }
XVOD_37mV_TPDL VO_INT1 VOD_37mV_TPDL DELAY PARAMS: TPD = { 84.75n + TPDL_ADD }

XVOD_38mV_TPDH VO_INT1 VOD_38mV_TPDH DELAY PARAMS: TPD = { 86.66n + TPDH_ADD }
XVOD_38mV_TPDL VO_INT1 VOD_38mV_TPDL DELAY PARAMS: TPD = { 84.50n + TPDL_ADD }

XVOD_39mV_TPDH VO_INT1 VOD_39mV_TPDH DELAY PARAMS: TPD = { 86.53n + TPDH_ADD }
XVOD_39mV_TPDL VO_INT1 VOD_39mV_TPDL DELAY PARAMS: TPD = { 84.25n + TPDL_ADD }


XVOD_40mV_TPDH VO_INT1 VOD_40mV_TPDH DELAY PARAMS: TPD = { 86.40n + TPDH_ADD }
XVOD_40mV_TPDL VO_INT1 VOD_40mV_TPDL DELAY PARAMS: TPD = { 84.00n + TPDL_ADD }

XVOD_41mV_TPDH VO_INT1 VOD_41mV_TPDH DELAY PARAMS: TPD = { 86.20n + TPDH_ADD }
XVOD_41mV_TPDL VO_INT1 VOD_41mV_TPDL DELAY PARAMS: TPD = { 83.70n + TPDL_ADD }

XVOD_42mV_TPDH VO_INT1 VOD_42mV_TPDH DELAY PARAMS: TPD = { 85.99n + TPDH_ADD }
XVOD_42mV_TPDL VO_INT1 VOD_42mV_TPDL DELAY PARAMS: TPD = { 83.40n + TPDL_ADD }

XVOD_43mV_TPDH VO_INT1 VOD_43mV_TPDH DELAY PARAMS: TPD = { 85.79n + TPDH_ADD }
XVOD_43mV_TPDL VO_INT1 VOD_43mV_TPDL DELAY PARAMS: TPD = { 83.10n + TPDL_ADD }

XVOD_44mV_TPDH VO_INT1 VOD_44mV_TPDH DELAY PARAMS: TPD = { 85.58n + TPDH_ADD }
XVOD_44mV_TPDL VO_INT1 VOD_44mV_TPDL DELAY PARAMS: TPD = { 82.80n + TPDL_ADD }

XVOD_45mV_TPDH VO_INT1 VOD_45mV_TPDH DELAY PARAMS: TPD = { 85.38n + TPDH_ADD }
XVOD_45mV_TPDL VO_INT1 VOD_45mV_TPDL DELAY PARAMS: TPD = { 82.50n + TPDL_ADD }

XVOD_46mV_TPDH VO_INT1 VOD_46mV_TPDH DELAY PARAMS: TPD = { 85.17n + TPDH_ADD }
XVOD_46mV_TPDL VO_INT1 VOD_46mV_TPDL DELAY PARAMS: TPD = { 82.20n + TPDL_ADD }

XVOD_47mV_TPDH VO_INT1 VOD_47mV_TPDH DELAY PARAMS: TPD = { 84.97n + TPDH_ADD }
XVOD_47mV_TPDL VO_INT1 VOD_47mV_TPDL DELAY PARAMS: TPD = { 81.90n + TPDL_ADD }

XVOD_48mV_TPDH VO_INT1 VOD_48mV_TPDH DELAY PARAMS: TPD = { 84.76n + TPDH_ADD }
XVOD_48mV_TPDL VO_INT1 VOD_48mV_TPDL DELAY PARAMS: TPD = { 81.60n + TPDL_ADD }

XVOD_49mV_TPDH VO_INT1 VOD_49mV_TPDH DELAY PARAMS: TPD = { 84.56n + TPDH_ADD }
XVOD_49mV_TPDL VO_INT1 VOD_49mV_TPDL DELAY PARAMS: TPD = { 81.30n + TPDL_ADD }


XVOD_50mV_TPDH VO_INT1 VOD_50mV_TPDH DELAY PARAMS: TPD = { 84.35n + TPDH_ADD }
XVOD_50mV_TPDL VO_INT1 VOD_50mV_TPDL DELAY PARAMS: TPD = { 81.00n + TPDL_ADD }

XVOD_51mV_TPDH VO_INT1 VOD_51mV_TPDH DELAY PARAMS: TPD = { 84.15n + TPDH_ADD }
XVOD_51mV_TPDL VO_INT1 VOD_51mV_TPDL DELAY PARAMS: TPD = { 80.70n + TPDL_ADD }

XVOD_52mV_TPDH VO_INT1 VOD_52mV_TPDH DELAY PARAMS: TPD = { 83.94n + TPDH_ADD }
XVOD_52mV_TPDL VO_INT1 VOD_52mV_TPDL DELAY PARAMS: TPD = { 80.40n + TPDL_ADD }

XVOD_53mV_TPDH VO_INT1 VOD_53mV_TPDH DELAY PARAMS: TPD = { 83.74n + TPDH_ADD }
XVOD_53mV_TPDL VO_INT1 VOD_53mV_TPDL DELAY PARAMS: TPD = { 80.10n + TPDL_ADD }

XVOD_54mV_TPDH VO_INT1 VOD_54mV_TPDH DELAY PARAMS: TPD = { 83.53n + TPDH_ADD }
XVOD_54mV_TPDL VO_INT1 VOD_54mV_TPDL DELAY PARAMS: TPD = { 79.80n + TPDL_ADD }

XVOD_55mV_TPDH VO_INT1 VOD_55mV_TPDH DELAY PARAMS: TPD = { 83.33n + TPDH_ADD }
XVOD_55mV_TPDL VO_INT1 VOD_55mV_TPDL DELAY PARAMS: TPD = { 79.50n + TPDL_ADD }

XVOD_56mV_TPDH VO_INT1 VOD_56mV_TPDH DELAY PARAMS: TPD = { 83.12n + TPDH_ADD }
XVOD_56mV_TPDL VO_INT1 VOD_56mV_TPDL DELAY PARAMS: TPD = { 79.20n + TPDL_ADD }

XVOD_57mV_TPDH VO_INT1 VOD_57mV_TPDH DELAY PARAMS: TPD = { 82.92n + TPDH_ADD }
XVOD_57mV_TPDL VO_INT1 VOD_57mV_TPDL DELAY PARAMS: TPD = { 78.90n + TPDL_ADD }

XVOD_58mV_TPDH VO_INT1 VOD_58mV_TPDH DELAY PARAMS: TPD = { 82.71n + TPDH_ADD }
XVOD_58mV_TPDL VO_INT1 VOD_58mV_TPDL DELAY PARAMS: TPD = { 78.60n + TPDL_ADD }

XVOD_59mV_TPDH VO_INT1 VOD_59mV_TPDH DELAY PARAMS: TPD = { 82.51n + TPDH_ADD }
XVOD_59mV_TPDL VO_INT1 VOD_59mV_TPDL DELAY PARAMS: TPD = { 78.30n + TPDL_ADD }


XVOD_60mV_TPDH VO_INT1 VOD_60mV_TPDH DELAY PARAMS: TPD = { 82.30n + TPDH_ADD }
XVOD_60mV_TPDL VO_INT1 VOD_60mV_TPDL DELAY PARAMS: TPD = { 78.00n + TPDL_ADD }

XVOD_61mV_TPDH VO_INT1 VOD_61mV_TPDH DELAY PARAMS: TPD = { 82.16n + TPDH_ADD }
XVOD_61mV_TPDL VO_INT1 VOD_61mV_TPDL DELAY PARAMS: TPD = { 77.90n + TPDL_ADD }

XVOD_62mV_TPDH VO_INT1 VOD_62mV_TPDH DELAY PARAMS: TPD = { 82.02n + TPDH_ADD }
XVOD_62mV_TPDL VO_INT1 VOD_62mV_TPDL DELAY PARAMS: TPD = { 77.80n + TPDL_ADD }

XVOD_63mV_TPDH VO_INT1 VOD_63mV_TPDH DELAY PARAMS: TPD = { 81.88n + TPDH_ADD }
XVOD_63mV_TPDL VO_INT1 VOD_63mV_TPDL DELAY PARAMS: TPD = { 77.70n + TPDL_ADD }

XVOD_64mV_TPDH VO_INT1 VOD_64mV_TPDH DELAY PARAMS: TPD = { 81.74n + TPDH_ADD }
XVOD_64mV_TPDL VO_INT1 VOD_64mV_TPDL DELAY PARAMS: TPD = { 77.60n + TPDL_ADD }

XVOD_65mV_TPDH VO_INT1 VOD_65mV_TPDH DELAY PARAMS: TPD = { 81.60n + TPDH_ADD }
XVOD_65mV_TPDL VO_INT1 VOD_65mV_TPDL DELAY PARAMS: TPD = { 77.50n + TPDL_ADD }

XVOD_66mV_TPDH VO_INT1 VOD_66mV_TPDH DELAY PARAMS: TPD = { 81.46n + TPDH_ADD }
XVOD_66mV_TPDL VO_INT1 VOD_66mV_TPDL DELAY PARAMS: TPD = { 77.40n + TPDL_ADD }

XVOD_67mV_TPDH VO_INT1 VOD_67mV_TPDH DELAY PARAMS: TPD = { 81.32n + TPDH_ADD }
XVOD_67mV_TPDL VO_INT1 VOD_67mV_TPDL DELAY PARAMS: TPD = { 77.30n + TPDL_ADD }

XVOD_68mV_TPDH VO_INT1 VOD_68mV_TPDH DELAY PARAMS: TPD = { 81.18n + TPDH_ADD }
XVOD_68mV_TPDL VO_INT1 VOD_68mV_TPDL DELAY PARAMS: TPD = { 77.20n + TPDL_ADD }

XVOD_69mV_TPDH VO_INT1 VOD_69mV_TPDH DELAY PARAMS: TPD = { 81.04n + TPDH_ADD }
XVOD_69mV_TPDL VO_INT1 VOD_69mV_TPDL DELAY PARAMS: TPD = { 77.10n + TPDL_ADD }


XVOD_70mV_TPDH VO_INT1 VOD_70mV_TPDH DELAY PARAMS: TPD = { 80.90n + TPDH_ADD }
XVOD_70mV_TPDL VO_INT1 VOD_70mV_TPDL DELAY PARAMS: TPD = { 77.00n + TPDL_ADD }

XVOD_71mV_TPDH VO_INT1 VOD_71mV_TPDH DELAY PARAMS: TPD = { 80.76n + TPDH_ADD }
XVOD_71mV_TPDL VO_INT1 VOD_71mV_TPDL DELAY PARAMS: TPD = { 76.90n + TPDL_ADD }

XVOD_72mV_TPDH VO_INT1 VOD_72mV_TPDH DELAY PARAMS: TPD = { 80.62n + TPDH_ADD }
XVOD_72mV_TPDL VO_INT1 VOD_72mV_TPDL DELAY PARAMS: TPD = { 76.80n + TPDL_ADD }

XVOD_73mV_TPDH VO_INT1 VOD_73mV_TPDH DELAY PARAMS: TPD = { 80.48n + TPDH_ADD }
XVOD_73mV_TPDL VO_INT1 VOD_73mV_TPDL DELAY PARAMS: TPD = { 76.70n + TPDL_ADD }

XVOD_74mV_TPDH VO_INT1 VOD_74mV_TPDH DELAY PARAMS: TPD = { 80.34n + TPDH_ADD }
XVOD_74mV_TPDL VO_INT1 VOD_74mV_TPDL DELAY PARAMS: TPD = { 76.60n + TPDL_ADD }

XVOD_75mV_TPDH VO_INT1 VOD_75mV_TPDH DELAY PARAMS: TPD = { 80.20n + TPDH_ADD }
XVOD_75mV_TPDL VO_INT1 VOD_75mV_TPDL DELAY PARAMS: TPD = { 76.50n + TPDL_ADD }

XVOD_76mV_TPDH VO_INT1 VOD_76mV_TPDH DELAY PARAMS: TPD = { 80.06n + TPDH_ADD }
XVOD_76mV_TPDL VO_INT1 VOD_76mV_TPDL DELAY PARAMS: TPD = { 76.40n + TPDL_ADD }

XVOD_77mV_TPDH VO_INT1 VOD_77mV_TPDH DELAY PARAMS: TPD = { 79.92n + TPDH_ADD }
XVOD_77mV_TPDL VO_INT1 VOD_77mV_TPDL DELAY PARAMS: TPD = { 76.30n + TPDL_ADD }

XVOD_78mV_TPDH VO_INT1 VOD_78mV_TPDH DELAY PARAMS: TPD = { 79.78n + TPDH_ADD }
XVOD_78mV_TPDL VO_INT1 VOD_78mV_TPDL DELAY PARAMS: TPD = { 76.20n + TPDL_ADD }

XVOD_79mV_TPDH VO_INT1 VOD_79mV_TPDH DELAY PARAMS: TPD = { 79.64n + TPDH_ADD }
XVOD_79mV_TPDL VO_INT1 VOD_79mV_TPDL DELAY PARAMS: TPD = { 76.10n + TPDL_ADD }


XVOD_80mV_TPDH VO_INT1 VOD_80mV_TPDH DELAY PARAMS: TPD = { 79.50n + TPDH_ADD }
XVOD_80mV_TPDL VO_INT1 VOD_80mV_TPDL DELAY PARAMS: TPD = { 76.00n + TPDL_ADD }

XVOD_81mV_TPDH VO_INT1 VOD_81mV_TPDH DELAY PARAMS: TPD = { 79.48n + TPDH_ADD }
XVOD_81mV_TPDL VO_INT1 VOD_81mV_TPDL DELAY PARAMS: TPD = { 75.95n + TPDL_ADD }

XVOD_82mV_TPDH VO_INT1 VOD_82mV_TPDH DELAY PARAMS: TPD = { 79.45n + TPDH_ADD }
XVOD_82mV_TPDL VO_INT1 VOD_82mV_TPDL DELAY PARAMS: TPD = { 75.90n + TPDL_ADD }

XVOD_83mV_TPDH VO_INT1 VOD_83mV_TPDH DELAY PARAMS: TPD = { 79.43n + TPDH_ADD }
XVOD_83mV_TPDL VO_INT1 VOD_83mV_TPDL DELAY PARAMS: TPD = { 75.85n + TPDL_ADD }

XVOD_84mV_TPDH VO_INT1 VOD_84mV_TPDH DELAY PARAMS: TPD = { 79.40n + TPDH_ADD }
XVOD_84mV_TPDL VO_INT1 VOD_84mV_TPDL DELAY PARAMS: TPD = { 75.80n + TPDL_ADD }

XVOD_85mV_TPDH VO_INT1 VOD_85mV_TPDH DELAY PARAMS: TPD = { 79.38n + TPDH_ADD }
XVOD_85mV_TPDL VO_INT1 VOD_85mV_TPDL DELAY PARAMS: TPD = { 75.75n + TPDL_ADD }

XVOD_86mV_TPDH VO_INT1 VOD_86mV_TPDH DELAY PARAMS: TPD = { 79.35n + TPDH_ADD }
XVOD_86mV_TPDL VO_INT1 VOD_86mV_TPDL DELAY PARAMS: TPD = { 75.70n + TPDL_ADD }

XVOD_87mV_TPDH VO_INT1 VOD_87mV_TPDH DELAY PARAMS: TPD = { 79.33n + TPDH_ADD }
XVOD_87mV_TPDL VO_INT1 VOD_87mV_TPDL DELAY PARAMS: TPD = { 75.65n + TPDL_ADD }

XVOD_88mV_TPDH VO_INT1 VOD_88mV_TPDH DELAY PARAMS: TPD = { 79.30n + TPDH_ADD }
XVOD_88mV_TPDL VO_INT1 VOD_88mV_TPDL DELAY PARAMS: TPD = { 75.60n + TPDL_ADD }

XVOD_89mV_TPDH VO_INT1 VOD_89mV_TPDH DELAY PARAMS: TPD = { 79.27n + TPDH_ADD }
XVOD_89mV_TPDL VO_INT1 VOD_89mV_TPDL DELAY PARAMS: TPD = { 75.55n + TPDL_ADD }


XVOD_90mV_TPDH VO_INT1 VOD_90mV_TPDH DELAY PARAMS: TPD = { 79.25n + TPDH_ADD }
XVOD_90mV_TPDL VO_INT1 VOD_90mV_TPDL DELAY PARAMS: TPD = { 75.50n + TPDL_ADD }

XVOD_91mV_TPDH VO_INT1 VOD_91mV_TPDH DELAY PARAMS: TPD = { 79.22n + TPDH_ADD }
XVOD_91mV_TPDL VO_INT1 VOD_91mV_TPDL DELAY PARAMS: TPD = { 75.45n + TPDL_ADD }

XVOD_92mV_TPDH VO_INT1 VOD_92mV_TPDH DELAY PARAMS: TPD = { 79.20n + TPDH_ADD }
XVOD_92mV_TPDL VO_INT1 VOD_92mV_TPDL DELAY PARAMS: TPD = { 75.40n + TPDL_ADD }

XVOD_93mV_TPDH VO_INT1 VOD_93mV_TPDH DELAY PARAMS: TPD = { 79.17n + TPDH_ADD }
XVOD_93mV_TPDL VO_INT1 VOD_93mV_TPDL DELAY PARAMS: TPD = { 75.35n + TPDL_ADD }

XVOD_94mV_TPDH VO_INT1 VOD_94mV_TPDH DELAY PARAMS: TPD = { 79.15n + TPDH_ADD }
XVOD_94mV_TPDL VO_INT1 VOD_94mV_TPDL DELAY PARAMS: TPD = { 75.30n + TPDL_ADD }

XVOD_95mV_TPDH VO_INT1 VOD_95mV_TPDH DELAY PARAMS: TPD = { 79.12n + TPDH_ADD }
XVOD_95mV_TPDL VO_INT1 VOD_95mV_TPDL DELAY PARAMS: TPD = { 75.25n + TPDL_ADD }

XVOD_96mV_TPDH VO_INT1 VOD_96mV_TPDH DELAY PARAMS: TPD = { 79.10n + TPDH_ADD }
XVOD_96mV_TPDL VO_INT1 VOD_96mV_TPDL DELAY PARAMS: TPD = { 75.20n + TPDL_ADD }

XVOD_97mV_TPDH VO_INT1 VOD_97mV_TPDH DELAY PARAMS: TPD = { 79.07n + TPDH_ADD }
XVOD_97mV_TPDL VO_INT1 VOD_97mV_TPDL DELAY PARAMS: TPD = { 75.15n + TPDL_ADD }

XVOD_98mV_TPDH VO_INT1 VOD_98mV_TPDH DELAY PARAMS: TPD = { 79.05n + TPDH_ADD }
XVOD_98mV_TPDL VO_INT1 VOD_98mV_TPDL DELAY PARAMS: TPD = { 75.10n + TPDL_ADD }

XVOD_99mV_TPDH VO_INT1 VOD_99mV_TPDH DELAY PARAMS: TPD = { 79.02n + TPDH_ADD }
XVOD_99mV_TPDL VO_INT1 VOD_99mV_TPDL DELAY PARAMS: TPD = { 75.05n + TPDL_ADD }

XVOD_100mV_TPDH VO_INT1 VOD_100mV_TPDH DELAY PARAMS: TPD = { 79.00n + TPDH_ADD }
XVOD_100mV_TPDL VO_INT1 VOD_100mV_TPDL DELAY PARAMS: TPD = { 75.00n + TPDL_ADD }





*0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789

EVOD_20mV VOD_20mV 0 VALUE = { V(VODSIGN) * V(VOD_20mV_TPDH) + (1-V(VODSIGN)) * V(VOD_20mV_TPDL)  }
EVOD_21mV VOD_21mV 0 VALUE = { V(VODSIGN) * V(VOD_21mV_TPDH) + (1-V(VODSIGN)) * V(VOD_21mV_TPDL)  }
EVOD_22mV VOD_22mV 0 VALUE = { V(VODSIGN) * V(VOD_22mV_TPDH) + (1-V(VODSIGN)) * V(VOD_22mV_TPDL)  }
EVOD_23mV VOD_23mV 0 VALUE = { V(VODSIGN) * V(VOD_23mV_TPDH) + (1-V(VODSIGN)) * V(VOD_23mV_TPDL)  }
EVOD_24mV VOD_24mV 0 VALUE = { V(VODSIGN) * V(VOD_24mV_TPDH) + (1-V(VODSIGN)) * V(VOD_24mV_TPDL)  }
EVOD_25mV VOD_25mV 0 VALUE = { V(VODSIGN) * V(VOD_25mV_TPDH) + (1-V(VODSIGN)) * V(VOD_25mV_TPDL)  }
EVOD_26mV VOD_26mV 0 VALUE = { V(VODSIGN) * V(VOD_26mV_TPDH) + (1-V(VODSIGN)) * V(VOD_26mV_TPDL)  }
EVOD_27mV VOD_27mV 0 VALUE = { V(VODSIGN) * V(VOD_27mV_TPDH) + (1-V(VODSIGN)) * V(VOD_27mV_TPDL)  }
EVOD_28mV VOD_28mV 0 VALUE = { V(VODSIGN) * V(VOD_28mV_TPDH) + (1-V(VODSIGN)) * V(VOD_28mV_TPDL)  }
EVOD_29mV VOD_29mV 0 VALUE = { V(VODSIGN) * V(VOD_29mV_TPDH) + (1-V(VODSIGN)) * V(VOD_29mV_TPDL)  }

EVOD_30mV VOD_30mV 0 VALUE = { V(VODSIGN) * V(VOD_30mV_TPDH) + (1-V(VODSIGN)) * V(VOD_30mV_TPDL)  }
EVOD_31mV VOD_31mV 0 VALUE = { V(VODSIGN) * V(VOD_31mV_TPDH) + (1-V(VODSIGN)) * V(VOD_31mV_TPDL)  }
EVOD_32mV VOD_32mV 0 VALUE = { V(VODSIGN) * V(VOD_32mV_TPDH) + (1-V(VODSIGN)) * V(VOD_32mV_TPDL)  }
EVOD_33mV VOD_33mV 0 VALUE = { V(VODSIGN) * V(VOD_33mV_TPDH) + (1-V(VODSIGN)) * V(VOD_33mV_TPDL)  }
EVOD_34mV VOD_34mV 0 VALUE = { V(VODSIGN) * V(VOD_34mV_TPDH) + (1-V(VODSIGN)) * V(VOD_34mV_TPDL)  }
EVOD_35mV VOD_35mV 0 VALUE = { V(VODSIGN) * V(VOD_35mV_TPDH) + (1-V(VODSIGN)) * V(VOD_35mV_TPDL)  }
EVOD_36mV VOD_36mV 0 VALUE = { V(VODSIGN) * V(VOD_36mV_TPDH) + (1-V(VODSIGN)) * V(VOD_36mV_TPDL)  }
EVOD_37mV VOD_37mV 0 VALUE = { V(VODSIGN) * V(VOD_37mV_TPDH) + (1-V(VODSIGN)) * V(VOD_37mV_TPDL)  }
EVOD_38mV VOD_38mV 0 VALUE = { V(VODSIGN) * V(VOD_38mV_TPDH) + (1-V(VODSIGN)) * V(VOD_38mV_TPDL)  }
EVOD_39mV VOD_39mV 0 VALUE = { V(VODSIGN) * V(VOD_39mV_TPDH) + (1-V(VODSIGN)) * V(VOD_39mV_TPDL)  }

EVOD_40mV VOD_40mV 0 VALUE = { V(VODSIGN) * V(VOD_40mV_TPDH) + (1-V(VODSIGN)) * V(VOD_40mV_TPDL)  }
EVOD_41mV VOD_41mV 0 VALUE = { V(VODSIGN) * V(VOD_41mV_TPDH) + (1-V(VODSIGN)) * V(VOD_41mV_TPDL)  }
EVOD_42mV VOD_42mV 0 VALUE = { V(VODSIGN) * V(VOD_42mV_TPDH) + (1-V(VODSIGN)) * V(VOD_42mV_TPDL)  }
EVOD_43mV VOD_43mV 0 VALUE = { V(VODSIGN) * V(VOD_43mV_TPDH) + (1-V(VODSIGN)) * V(VOD_43mV_TPDL)  }
EVOD_44mV VOD_44mV 0 VALUE = { V(VODSIGN) * V(VOD_44mV_TPDH) + (1-V(VODSIGN)) * V(VOD_44mV_TPDL)  }
EVOD_45mV VOD_45mV 0 VALUE = { V(VODSIGN) * V(VOD_45mV_TPDH) + (1-V(VODSIGN)) * V(VOD_45mV_TPDL)  }
EVOD_46mV VOD_46mV 0 VALUE = { V(VODSIGN) * V(VOD_46mV_TPDH) + (1-V(VODSIGN)) * V(VOD_46mV_TPDL)  }
EVOD_47mV VOD_47mV 0 VALUE = { V(VODSIGN) * V(VOD_47mV_TPDH) + (1-V(VODSIGN)) * V(VOD_47mV_TPDL)  }
EVOD_48mV VOD_48mV 0 VALUE = { V(VODSIGN) * V(VOD_48mV_TPDH) + (1-V(VODSIGN)) * V(VOD_48mV_TPDL)  }
EVOD_49mV VOD_49mV 0 VALUE = { V(VODSIGN) * V(VOD_49mV_TPDH) + (1-V(VODSIGN)) * V(VOD_49mV_TPDL)  }

EVOD_50mV VOD_50mV 0 VALUE = { V(VODSIGN) * V(VOD_50mV_TPDH) + (1-V(VODSIGN)) * V(VOD_50mV_TPDL)  }
EVOD_51mV VOD_51mV 0 VALUE = { V(VODSIGN) * V(VOD_51mV_TPDH) + (1-V(VODSIGN)) * V(VOD_51mV_TPDL)  }
EVOD_52mV VOD_52mV 0 VALUE = { V(VODSIGN) * V(VOD_52mV_TPDH) + (1-V(VODSIGN)) * V(VOD_52mV_TPDL)  }
EVOD_53mV VOD_53mV 0 VALUE = { V(VODSIGN) * V(VOD_53mV_TPDH) + (1-V(VODSIGN)) * V(VOD_53mV_TPDL)  }
EVOD_54mV VOD_54mV 0 VALUE = { V(VODSIGN) * V(VOD_54mV_TPDH) + (1-V(VODSIGN)) * V(VOD_54mV_TPDL)  }
EVOD_55mV VOD_55mV 0 VALUE = { V(VODSIGN) * V(VOD_55mV_TPDH) + (1-V(VODSIGN)) * V(VOD_55mV_TPDL)  }
EVOD_56mV VOD_56mV 0 VALUE = { V(VODSIGN) * V(VOD_56mV_TPDH) + (1-V(VODSIGN)) * V(VOD_56mV_TPDL)  }
EVOD_57mV VOD_57mV 0 VALUE = { V(VODSIGN) * V(VOD_57mV_TPDH) + (1-V(VODSIGN)) * V(VOD_57mV_TPDL)  }
EVOD_58mV VOD_58mV 0 VALUE = { V(VODSIGN) * V(VOD_58mV_TPDH) + (1-V(VODSIGN)) * V(VOD_58mV_TPDL)  }
EVOD_59mV VOD_59mV 0 VALUE = { V(VODSIGN) * V(VOD_59mV_TPDH) + (1-V(VODSIGN)) * V(VOD_59mV_TPDL)  }

EVOD_60mV VOD_60mV 0 VALUE = { V(VODSIGN) * V(VOD_60mV_TPDH) + (1-V(VODSIGN)) * V(VOD_60mV_TPDL)  }
EVOD_61mV VOD_61mV 0 VALUE = { V(VODSIGN) * V(VOD_61mV_TPDH) + (1-V(VODSIGN)) * V(VOD_61mV_TPDL)  }
EVOD_62mV VOD_62mV 0 VALUE = { V(VODSIGN) * V(VOD_62mV_TPDH) + (1-V(VODSIGN)) * V(VOD_62mV_TPDL)  }
EVOD_63mV VOD_63mV 0 VALUE = { V(VODSIGN) * V(VOD_63mV_TPDH) + (1-V(VODSIGN)) * V(VOD_63mV_TPDL)  }
EVOD_64mV VOD_64mV 0 VALUE = { V(VODSIGN) * V(VOD_64mV_TPDH) + (1-V(VODSIGN)) * V(VOD_64mV_TPDL)  }
EVOD_65mV VOD_65mV 0 VALUE = { V(VODSIGN) * V(VOD_65mV_TPDH) + (1-V(VODSIGN)) * V(VOD_65mV_TPDL)  }
EVOD_66mV VOD_66mV 0 VALUE = { V(VODSIGN) * V(VOD_66mV_TPDH) + (1-V(VODSIGN)) * V(VOD_66mV_TPDL)  }
EVOD_67mV VOD_67mV 0 VALUE = { V(VODSIGN) * V(VOD_67mV_TPDH) + (1-V(VODSIGN)) * V(VOD_67mV_TPDL)  }
EVOD_68mV VOD_68mV 0 VALUE = { V(VODSIGN) * V(VOD_68mV_TPDH) + (1-V(VODSIGN)) * V(VOD_68mV_TPDL)  }
EVOD_69mV VOD_69mV 0 VALUE = { V(VODSIGN) * V(VOD_69mV_TPDH) + (1-V(VODSIGN)) * V(VOD_69mV_TPDL)  }

EVOD_70mV VOD_70mV 0 VALUE = { V(VODSIGN) * V(VOD_70mV_TPDH) + (1-V(VODSIGN)) * V(VOD_70mV_TPDL)  }
EVOD_71mV VOD_71mV 0 VALUE = { V(VODSIGN) * V(VOD_71mV_TPDH) + (1-V(VODSIGN)) * V(VOD_71mV_TPDL)  }
EVOD_72mV VOD_72mV 0 VALUE = { V(VODSIGN) * V(VOD_72mV_TPDH) + (1-V(VODSIGN)) * V(VOD_72mV_TPDL)  }
EVOD_73mV VOD_73mV 0 VALUE = { V(VODSIGN) * V(VOD_73mV_TPDH) + (1-V(VODSIGN)) * V(VOD_73mV_TPDL)  }
EVOD_74mV VOD_74mV 0 VALUE = { V(VODSIGN) * V(VOD_74mV_TPDH) + (1-V(VODSIGN)) * V(VOD_74mV_TPDL)  }
EVOD_75mV VOD_75mV 0 VALUE = { V(VODSIGN) * V(VOD_75mV_TPDH) + (1-V(VODSIGN)) * V(VOD_75mV_TPDL)  }
EVOD_76mV VOD_76mV 0 VALUE = { V(VODSIGN) * V(VOD_76mV_TPDH) + (1-V(VODSIGN)) * V(VOD_76mV_TPDL)  }
EVOD_77mV VOD_77mV 0 VALUE = { V(VODSIGN) * V(VOD_77mV_TPDH) + (1-V(VODSIGN)) * V(VOD_77mV_TPDL)  }
EVOD_78mV VOD_78mV 0 VALUE = { V(VODSIGN) * V(VOD_78mV_TPDH) + (1-V(VODSIGN)) * V(VOD_78mV_TPDL)  }
EVOD_79mV VOD_79mV 0 VALUE = { V(VODSIGN) * V(VOD_79mV_TPDH) + (1-V(VODSIGN)) * V(VOD_79mV_TPDL)  }

EVOD_80mV VOD_80mV 0 VALUE = { V(VODSIGN) * V(VOD_80mV_TPDH) + (1-V(VODSIGN)) * V(VOD_80mV_TPDL)  }
EVOD_81mV VOD_81mV 0 VALUE = { V(VODSIGN) * V(VOD_81mV_TPDH) + (1-V(VODSIGN)) * V(VOD_81mV_TPDL)  }
EVOD_82mV VOD_82mV 0 VALUE = { V(VODSIGN) * V(VOD_82mV_TPDH) + (1-V(VODSIGN)) * V(VOD_82mV_TPDL)  }
EVOD_83mV VOD_83mV 0 VALUE = { V(VODSIGN) * V(VOD_83mV_TPDH) + (1-V(VODSIGN)) * V(VOD_83mV_TPDL)  }
EVOD_84mV VOD_84mV 0 VALUE = { V(VODSIGN) * V(VOD_84mV_TPDH) + (1-V(VODSIGN)) * V(VOD_84mV_TPDL)  }
EVOD_85mV VOD_85mV 0 VALUE = { V(VODSIGN) * V(VOD_85mV_TPDH) + (1-V(VODSIGN)) * V(VOD_85mV_TPDL)  }
EVOD_86mV VOD_86mV 0 VALUE = { V(VODSIGN) * V(VOD_86mV_TPDH) + (1-V(VODSIGN)) * V(VOD_86mV_TPDL)  }
EVOD_87mV VOD_87mV 0 VALUE = { V(VODSIGN) * V(VOD_87mV_TPDH) + (1-V(VODSIGN)) * V(VOD_87mV_TPDL)  }
EVOD_88mV VOD_88mV 0 VALUE = { V(VODSIGN) * V(VOD_88mV_TPDH) + (1-V(VODSIGN)) * V(VOD_88mV_TPDL)  }
EVOD_89mV VOD_89mV 0 VALUE = { V(VODSIGN) * V(VOD_89mV_TPDH) + (1-V(VODSIGN)) * V(VOD_89mV_TPDL)  }

EVOD_90mV VOD_90mV 0 VALUE = { V(VODSIGN) * V(VOD_90mV_TPDH) + (1-V(VODSIGN)) * V(VOD_90mV_TPDL)  }
EVOD_91mV VOD_91mV 0 VALUE = { V(VODSIGN) * V(VOD_91mV_TPDH) + (1-V(VODSIGN)) * V(VOD_91mV_TPDL)  }
EVOD_92mV VOD_92mV 0 VALUE = { V(VODSIGN) * V(VOD_92mV_TPDH) + (1-V(VODSIGN)) * V(VOD_92mV_TPDL)  }
EVOD_93mV VOD_93mV 0 VALUE = { V(VODSIGN) * V(VOD_93mV_TPDH) + (1-V(VODSIGN)) * V(VOD_93mV_TPDL)  }
EVOD_94mV VOD_94mV 0 VALUE = { V(VODSIGN) * V(VOD_94mV_TPDH) + (1-V(VODSIGN)) * V(VOD_94mV_TPDL)  }
EVOD_95mV VOD_95mV 0 VALUE = { V(VODSIGN) * V(VOD_95mV_TPDH) + (1-V(VODSIGN)) * V(VOD_95mV_TPDL)  }
EVOD_96mV VOD_96mV 0 VALUE = { V(VODSIGN) * V(VOD_96mV_TPDH) + (1-V(VODSIGN)) * V(VOD_96mV_TPDL)  }
EVOD_97mV VOD_97mV 0 VALUE = { V(VODSIGN) * V(VOD_97mV_TPDH) + (1-V(VODSIGN)) * V(VOD_97mV_TPDL)  }
EVOD_98mV VOD_98mV 0 VALUE = { V(VODSIGN) * V(VOD_98mV_TPDH) + (1-V(VODSIGN)) * V(VOD_98mV_TPDL)  }
EVOD_99mV VOD_99mV 0 VALUE = { V(VODSIGN) * V(VOD_99mV_TPDH) + (1-V(VODSIGN)) * V(VOD_99mV_TPDL)  }

EVOD_100mV VOD_100mV 0 VALUE = { V(VODSIGN) * V(VOD_100mV_TPDH) + (1-V(VODSIGN)) * V(VOD_100mV_TPDL)  }


EVOD_20mV_ONOFF VOD_20mV_ONOFF 0 VALUE =
+ { IF (                                   ( ABS( V(VIP,VIM) ) * 2 ) <= 20m, 1, 0 ) }

EVOD_21mV_ONOFF VOD_21mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 20m & ( ABS( V(VIP,VIM) ) * 2 ) <= 21m, 1, 0 ) }

EVOD_22mV_ONOFF VOD_22mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 21m & ( ABS( V(VIP,VIM) ) * 2 ) <= 22m, 1, 0 ) }

EVOD_23mV_ONOFF VOD_23mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 22m & ( ABS( V(VIP,VIM) ) * 2 ) <= 23m, 1, 0 ) }

EVOD_24mV_ONOFF VOD_24mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 23m & ( ABS( V(VIP,VIM) ) * 2 ) <= 24m, 1, 0 ) }

EVOD_25mV_ONOFF VOD_25mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 24m & ( ABS( V(VIP,VIM) ) * 2 ) <= 25m, 1, 0 ) }

EVOD_26mV_ONOFF VOD_26mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 25m & ( ABS( V(VIP,VIM) ) * 2 ) <= 26m, 1, 0 ) }

EVOD_27mV_ONOFF VOD_27mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 26m & ( ABS( V(VIP,VIM) ) * 2 ) <= 27m, 1, 0 ) }

EVOD_28mV_ONOFF VOD_28mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 27m & ( ABS( V(VIP,VIM) ) * 2 ) <= 28m, 1, 0 ) }

EVOD_29mV_ONOFF VOD_29mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 28m & ( ABS( V(VIP,VIM) ) * 2 ) <= 29m, 1, 0 ) }



EVOD_30mV_ONOFF VOD_30mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 29m & ( ABS( V(VIP,VIM) ) * 2 ) <= 30m, 1, 0 ) }

EVOD_31mV_ONOFF VOD_31mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 30m & ( ABS( V(VIP,VIM) ) * 2 ) <= 31m, 1, 0 ) }

EVOD_32mV_ONOFF VOD_32mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 31m & ( ABS( V(VIP,VIM) ) * 2 ) <= 32m, 1, 0 ) }

EVOD_33mV_ONOFF VOD_33mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 32m & ( ABS( V(VIP,VIM) ) * 2 ) <= 33m, 1, 0 ) }

EVOD_34mV_ONOFF VOD_34mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 33m & ( ABS( V(VIP,VIM) ) * 2 ) <= 34m, 1, 0 ) }

EVOD_35mV_ONOFF VOD_35mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 34m & ( ABS( V(VIP,VIM) ) * 2 ) <= 35m, 1, 0 ) }

EVOD_36mV_ONOFF VOD_36mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 35m & ( ABS( V(VIP,VIM) ) * 2 ) <= 36m, 1, 0 ) }

EVOD_37mV_ONOFF VOD_37mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 36m & ( ABS( V(VIP,VIM) ) * 2 ) <= 37m, 1, 0 ) }

EVOD_38mV_ONOFF VOD_38mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 37m & ( ABS( V(VIP,VIM) ) * 2 ) <= 38m, 1, 0 ) }

EVOD_39mV_ONOFF VOD_39mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 38m & ( ABS( V(VIP,VIM) ) * 2 ) <= 39m, 1, 0 ) }



EVOD_40mV_ONOFF VOD_40mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 39m & ( ABS( V(VIP,VIM) ) * 2 ) <= 40m, 1, 0 ) }

EVOD_41mV_ONOFF VOD_41mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 40m & ( ABS( V(VIP,VIM) ) * 2 ) <= 41m, 1, 0 ) }

EVOD_42mV_ONOFF VOD_42mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 41m & ( ABS( V(VIP,VIM) ) * 2 ) <= 42m, 1, 0 ) }

EVOD_43mV_ONOFF VOD_43mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 42m & ( ABS( V(VIP,VIM) ) * 2 ) <= 43m, 1, 0 ) }

EVOD_44mV_ONOFF VOD_44mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 43m & ( ABS( V(VIP,VIM) ) * 2 ) <= 44m, 1, 0 ) }

EVOD_45mV_ONOFF VOD_45mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 44m & ( ABS( V(VIP,VIM) ) * 2 ) <= 45m, 1, 0 ) }

EVOD_46mV_ONOFF VOD_46mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 45m & ( ABS( V(VIP,VIM) ) * 2 ) <= 46m, 1, 0 ) }

EVOD_47mV_ONOFF VOD_47mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 46m & ( ABS( V(VIP,VIM) ) * 2 ) <= 47m, 1, 0 ) }

EVOD_48mV_ONOFF VOD_48mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 47m & ( ABS( V(VIP,VIM) ) * 2 ) <= 48m, 1, 0 ) }

EVOD_49mV_ONOFF VOD_49mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 48m & ( ABS( V(VIP,VIM) ) * 2 ) <= 49m, 1, 0 ) }



EVOD_50mV_ONOFF VOD_50mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 49m & ( ABS( V(VIP,VIM) ) * 2 ) <= 50m, 1, 0 ) }

EVOD_51mV_ONOFF VOD_51mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 50m & ( ABS( V(VIP,VIM) ) * 2 ) <= 51m, 1, 0 ) }

EVOD_52mV_ONOFF VOD_52mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 51m & ( ABS( V(VIP,VIM) ) * 2 ) <= 52m, 1, 0 ) }

EVOD_53mV_ONOFF VOD_53mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 52m & ( ABS( V(VIP,VIM) ) * 2 ) <= 53m, 1, 0 ) }

EVOD_54mV_ONOFF VOD_54mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 53m & ( ABS( V(VIP,VIM) ) * 2 ) <= 54m, 1, 0 ) }

EVOD_55mV_ONOFF VOD_55mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 54m & ( ABS( V(VIP,VIM) ) * 2 ) <= 55m, 1, 0 ) }

EVOD_56mV_ONOFF VOD_56mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 55m & ( ABS( V(VIP,VIM) ) * 2 ) <= 56m, 1, 0 ) }

EVOD_57mV_ONOFF VOD_57mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 56m & ( ABS( V(VIP,VIM) ) * 2 ) <= 57m, 1, 0 ) }

EVOD_58mV_ONOFF VOD_58mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 57m & ( ABS( V(VIP,VIM) ) * 2 ) <= 58m, 1, 0 ) }

EVOD_59mV_ONOFF VOD_59mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 58m & ( ABS( V(VIP,VIM) ) * 2 ) <= 59m, 1, 0 ) }



EVOD_60mV_ONOFF VOD_60mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 59m & ( ABS( V(VIP,VIM) ) * 2 ) <= 60m, 1, 0 ) }

EVOD_61mV_ONOFF VOD_61mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 60m & ( ABS( V(VIP,VIM) ) * 2 ) <= 61m, 1, 0 ) }

EVOD_62mV_ONOFF VOD_62mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 61m & ( ABS( V(VIP,VIM) ) * 2 ) <= 62m, 1, 0 ) }

EVOD_63mV_ONOFF VOD_63mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 62m & ( ABS( V(VIP,VIM) ) * 2 ) <= 63m, 1, 0 ) }

EVOD_64mV_ONOFF VOD_64mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 63m & ( ABS( V(VIP,VIM) ) * 2 ) <= 64m, 1, 0 ) }

EVOD_65mV_ONOFF VOD_65mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 64m & ( ABS( V(VIP,VIM) ) * 2 ) <= 65m, 1, 0 ) }

EVOD_66mV_ONOFF VOD_66mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 65m & ( ABS( V(VIP,VIM) ) * 2 ) <= 66m, 1, 0 ) }

EVOD_67mV_ONOFF VOD_67mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 66m & ( ABS( V(VIP,VIM) ) * 2 ) <= 67m, 1, 0 ) }

EVOD_68mV_ONOFF VOD_68mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 67m & ( ABS( V(VIP,VIM) ) * 2 ) <= 68m, 1, 0 ) }

EVOD_69mV_ONOFF VOD_69mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 68m & ( ABS( V(VIP,VIM) ) * 2 ) <= 69m, 1, 0 ) }


EVOD_70mV_ONOFF VOD_70mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 69m & ( ABS( V(VIP,VIM) ) * 2 ) <= 70m, 1, 0 ) }

EVOD_71mV_ONOFF VOD_71mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 70m & ( ABS( V(VIP,VIM) ) * 2 ) <= 71m, 1, 0 ) }

EVOD_72mV_ONOFF VOD_72mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 71m & ( ABS( V(VIP,VIM) ) * 2 ) <= 72m, 1, 0 ) }

EVOD_73mV_ONOFF VOD_73mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 72m & ( ABS( V(VIP,VIM) ) * 2 ) <= 73m, 1, 0 ) }

EVOD_74mV_ONOFF VOD_74mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 73m & ( ABS( V(VIP,VIM) ) * 2 ) <= 74m, 1, 0 ) }

EVOD_75mV_ONOFF VOD_75mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 74m & ( ABS( V(VIP,VIM) ) * 2 ) <= 75m, 1, 0 ) }

EVOD_76mV_ONOFF VOD_76mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 75m & ( ABS( V(VIP,VIM) ) * 2 ) <= 76m, 1, 0 ) }

EVOD_77mV_ONOFF VOD_77mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 76m & ( ABS( V(VIP,VIM) ) * 2 ) <= 77m, 1, 0 ) }

EVOD_78mV_ONOFF VOD_78mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 77m & ( ABS( V(VIP,VIM) ) * 2 ) <= 78m, 1, 0 ) }

EVOD_79mV_ONOFF VOD_79mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 78m & ( ABS( V(VIP,VIM) ) * 2 ) <= 79m, 1, 0 ) }



EVOD_80mV_ONOFF VOD_80mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 79m & ( ABS( V(VIP,VIM) ) * 2 ) <= 80m, 1, 0 ) }

EVOD_81mV_ONOFF VOD_81mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 80m & ( ABS( V(VIP,VIM) ) * 2 ) <= 81m, 1, 0 ) }

EVOD_82mV_ONOFF VOD_82mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 81m & ( ABS( V(VIP,VIM) ) * 2 ) <= 82m, 1, 0 ) }

EVOD_83mV_ONOFF VOD_83mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 82m & ( ABS( V(VIP,VIM) ) * 2 ) <= 83m, 1, 0 ) }

EVOD_84mV_ONOFF VOD_84mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 83m & ( ABS( V(VIP,VIM) ) * 2 ) <= 84m, 1, 0 ) }

EVOD_85mV_ONOFF VOD_85mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 84m & ( ABS( V(VIP,VIM) ) * 2 ) <= 85m, 1, 0 ) }

EVOD_86mV_ONOFF VOD_86mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 85m & ( ABS( V(VIP,VIM) ) * 2 ) <= 86m, 1, 0 ) }

EVOD_87mV_ONOFF VOD_87mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 86m & ( ABS( V(VIP,VIM) ) * 2 ) <= 87m, 1, 0 ) }

EVOD_88mV_ONOFF VOD_88mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 87m & ( ABS( V(VIP,VIM) ) * 2 ) <= 88m, 1, 0 ) }

EVOD_89mV_ONOFF VOD_89mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 88m & ( ABS( V(VIP,VIM) ) * 2 ) <= 89m, 1, 0 ) }



EVOD_90mV_ONOFF VOD_90mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 89m & ( ABS( V(VIP,VIM) ) * 2 ) <= 90m, 1, 0 ) }

EVOD_91mV_ONOFF VOD_91mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 90m & ( ABS( V(VIP,VIM) ) * 2 ) <= 91m, 1, 0 ) }

EVOD_92mV_ONOFF VOD_92mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 91m & ( ABS( V(VIP,VIM) ) * 2 ) <= 92m, 1, 0 ) }

EVOD_93mV_ONOFF VOD_93mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 92m & ( ABS( V(VIP,VIM) ) * 2 ) <= 93m, 1, 0 ) }

EVOD_94mV_ONOFF VOD_94mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 93m & ( ABS( V(VIP,VIM) ) * 2 ) <= 94m, 1, 0 ) }

EVOD_95mV_ONOFF VOD_95mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 94m & ( ABS( V(VIP,VIM) ) * 2 ) <= 95m, 1, 0 ) }

EVOD_96mV_ONOFF VOD_96mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 95m & ( ABS( V(VIP,VIM) ) * 2 ) <= 96m, 1, 0 ) }

EVOD_97mV_ONOFF VOD_97mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 96m & ( ABS( V(VIP,VIM) ) * 2 ) <= 97m, 1, 0 ) }

EVOD_98mV_ONOFF VOD_98mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 97m & ( ABS( V(VIP,VIM) ) * 2 ) <= 98m, 1, 0 ) }

EVOD_99mV_ONOFF VOD_99mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 98m & ( ABS( V(VIP,VIM) ) * 2 ) <= 99m, 1, 0 ) }



EVOD_100mV_ONOFF VOD_100mV_ONOFF 0 VALUE =
+ { IF ( ( ABS( V(VIP,VIM) ) * 2 ) > 99m                                   , 1, 0 ) }



EVOD_20mV_to_59mV VOD_20mV_to_59mV 0 VALUE = 	{
+ V(VOD_20mV_ONOFF) * V(VOD_20mV) +
+ V(VOD_21mV_ONOFF) * V(VOD_21mV) +
+ V(VOD_22mV_ONOFF) * V(VOD_22mV) +
+ V(VOD_23mV_ONOFF) * V(VOD_23mV) +
+ V(VOD_24mV_ONOFF) * V(VOD_24mV) +
+ V(VOD_25mV_ONOFF) * V(VOD_25mV) +
+ V(VOD_26mV_ONOFF) * V(VOD_26mV) +
+ V(VOD_27mV_ONOFF) * V(VOD_27mV) +
+ V(VOD_28mV_ONOFF) * V(VOD_28mV) +
+ V(VOD_29mV_ONOFF) * V(VOD_29mV) +
+ 0				  +
+ V(VOD_30mV_ONOFF) * V(VOD_30mV) +
+ V(VOD_31mV_ONOFF) * V(VOD_31mV) +
+ V(VOD_32mV_ONOFF) * V(VOD_32mV) +
+ V(VOD_33mV_ONOFF) * V(VOD_33mV) +
+ V(VOD_34mV_ONOFF) * V(VOD_34mV) +
+ V(VOD_35mV_ONOFF) * V(VOD_35mV) +
+ V(VOD_36mV_ONOFF) * V(VOD_36mV) +
+ V(VOD_37mV_ONOFF) * V(VOD_37mV) +
+ V(VOD_38mV_ONOFF) * V(VOD_38mV) +
+ V(VOD_39mV_ONOFF) * V(VOD_39mV) +
+ 0				  +
+ V(VOD_40mV_ONOFF) * V(VOD_40mV) +
+ V(VOD_41mV_ONOFF) * V(VOD_41mV) +
+ V(VOD_42mV_ONOFF) * V(VOD_42mV) +
+ V(VOD_43mV_ONOFF) * V(VOD_43mV) +
+ V(VOD_44mV_ONOFF) * V(VOD_44mV) +
+ V(VOD_45mV_ONOFF) * V(VOD_45mV) +
+ V(VOD_46mV_ONOFF) * V(VOD_46mV) +
+ V(VOD_47mV_ONOFF) * V(VOD_47mV) +
+ V(VOD_48mV_ONOFF) * V(VOD_48mV) +
+ V(VOD_49mV_ONOFF) * V(VOD_49mV) +
+ 0				  +
+ V(VOD_50mV_ONOFF) * V(VOD_50mV) +
+ V(VOD_51mV_ONOFF) * V(VOD_51mV) +
+ V(VOD_52mV_ONOFF) * V(VOD_52mV) +
+ V(VOD_53mV_ONOFF) * V(VOD_53mV) +
+ V(VOD_54mV_ONOFF) * V(VOD_54mV) +
+ V(VOD_55mV_ONOFF) * V(VOD_55mV) +
+ V(VOD_56mV_ONOFF) * V(VOD_56mV) +
+ V(VOD_57mV_ONOFF) * V(VOD_57mV) +
+ V(VOD_58mV_ONOFF) * V(VOD_58mV) +
+ V(VOD_59mV_ONOFF) * V(VOD_59mV) +
+ 0				 	}


EVOD_60mV_to_100mV VOD_60mV_to_100mV 0 VALUE = 	{
+ V(VOD_60mV_ONOFF) * V(VOD_60mV) +
+ V(VOD_61mV_ONOFF) * V(VOD_61mV) +
+ V(VOD_62mV_ONOFF) * V(VOD_62mV) +
+ V(VOD_63mV_ONOFF) * V(VOD_63mV) +
+ V(VOD_64mV_ONOFF) * V(VOD_64mV) +
+ V(VOD_65mV_ONOFF) * V(VOD_65mV) +
+ V(VOD_66mV_ONOFF) * V(VOD_66mV) +
+ V(VOD_67mV_ONOFF) * V(VOD_67mV) +
+ V(VOD_68mV_ONOFF) * V(VOD_68mV) +
+ V(VOD_69mV_ONOFF) * V(VOD_69mV) +
+ 0				  +
+ V(VOD_70mV_ONOFF) * V(VOD_70mV) +
+ V(VOD_71mV_ONOFF) * V(VOD_71mV) +
+ V(VOD_72mV_ONOFF) * V(VOD_72mV) +
+ V(VOD_73mV_ONOFF) * V(VOD_73mV) +
+ V(VOD_74mV_ONOFF) * V(VOD_74mV) +
+ V(VOD_75mV_ONOFF) * V(VOD_75mV) +
+ V(VOD_76mV_ONOFF) * V(VOD_76mV) +
+ V(VOD_77mV_ONOFF) * V(VOD_77mV) +
+ V(VOD_78mV_ONOFF) * V(VOD_78mV) +
+ V(VOD_79mV_ONOFF) * V(VOD_79mV) +
+ 0				  +
+ V(VOD_80mV_ONOFF) * V(VOD_80mV) +
+ V(VOD_81mV_ONOFF) * V(VOD_81mV) +
+ V(VOD_82mV_ONOFF) * V(VOD_82mV) +
+ V(VOD_83mV_ONOFF) * V(VOD_83mV) +
+ V(VOD_84mV_ONOFF) * V(VOD_84mV) +
+ V(VOD_85mV_ONOFF) * V(VOD_85mV) +
+ V(VOD_86mV_ONOFF) * V(VOD_86mV) +
+ V(VOD_87mV_ONOFF) * V(VOD_87mV) +
+ V(VOD_88mV_ONOFF) * V(VOD_88mV) +
+ V(VOD_89mV_ONOFF) * V(VOD_89mV) +
+ 0				  +
+ V(VOD_90mV_ONOFF) * V(VOD_90mV) +
+ V(VOD_91mV_ONOFF) * V(VOD_91mV) +
+ V(VOD_92mV_ONOFF) * V(VOD_92mV) +
+ V(VOD_93mV_ONOFF) * V(VOD_93mV) +
+ V(VOD_94mV_ONOFF) * V(VOD_94mV) +
+ V(VOD_95mV_ONOFF) * V(VOD_95mV) +
+ V(VOD_96mV_ONOFF) * V(VOD_96mV) +
+ V(VOD_97mV_ONOFF) * V(VOD_97mV) +
+ V(VOD_98mV_ONOFF) * V(VOD_98mV) +
+ V(VOD_99mV_ONOFF) * V(VOD_99mV) +
+ 0				  +
+ V(VOD_100mV_ONOFF) * V(VOD_100mV) +
+ 0				 	}



EVO VO 0 VALUE = { V(VOD_20mV_to_59mV) + V(VOD_60mV_to_100mV)}


.ENDS



.SUBCKT DELAY VIN VOUT PARAMS: TPD = 100n

*The 89.37 was obtained by centered at 1fF of loading capacitor and 89ns  input
*and 89ns measured value

.PARAM TPD_TEMP = { 1n * ( -8E-10 	* (TEMP*TEMP*TEMP*TEMP*TEMP) 	+
+                           4E-07 	* (TEMP*TEMP*TEMP*TEMP	   )	+
+  		           -7E-05 	* (TEMP*TEMP*TEMP	   ) 	+
+		            0.0064      * (TEMP*TEMP		   )    +
+		           -0.4336 	* (TEMP			   )	+
+		            97.228 - 89.37 + TPD/1n				) }

*This is to shift from 1fF center to 15pF as the center
*The goal is 89ns based on Figure 13 15pF.
.PARAM TPD_15pF_Calibration = { 0.65n }

T1 VIN 0 VOUT 0 Z0=50 TD={TPD_TEMP - TPD_15pF_Calibration}
R1 VOUT 0 50

.ENDS

*0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
.SUBCKT VOHVOL  VDD  VSS  VI  VO VIMON  GNDF

*FORMAT
*.PARAM VOHDELSUP_VIMONL_Y1 = {  DS VALUE +/-  Adjust to meet Measured Value}

.PARAM SUP_X1 = { 2.7 }
.PARAM SUP_X2 = { 5.0 }



.PARAM VOHDELSUP_VIMONL_Y1 = {  20m -  1.0m }
.PARAM VOHDELSUP_VIMONL_Y2 = {  10m -  1.0m }

.PARAM VOHDELSUP_VIMONL_SLOPE = { ( VOHDELSUP_VIMONL_Y2-VOHDELSUP_VIMONL_Y1 ) / ( SUP_X2-SUP_X1 ) }
.PARAM VOHDELSUP_VIMONL_INTCP = { VOHDELSUP_VIMONL_Y1 - VOHDELSUP_VIMONL_SLOPE * SUP_X1 }

EVOHDELSUP_VIMONL VOHDELSUP_VIMONL 0 VALUE =
+ { VOHDELSUP_VIMONL_SLOPE * V(VDD,VSS) + VOHDELSUP_VIMONL_INTCP }



.PARAM VOHDELSUP_VIMONH_Y1 = { 260m - 10.0m }
.PARAM VOHDELSUP_VIMONH_Y2 = { 150m - 10.0m }

.PARAM VOHDELSUP_VIMONH_SLOPE = { ( VOHDELSUP_VIMONH_Y2-VOHDELSUP_VIMONH_Y1 ) / ( SUP_X2-SUP_X1 ) }
.PARAM VOHDELSUP_VIMONH_INTCP = { VOHDELSUP_VIMONH_Y1 - VOHDELSUP_VIMONH_SLOPE * SUP_X1 }

EVOHDELSUP_VIMONH VOHDELSUP_VIMONH 0 VALUE =
+ { VOHDELSUP_VIMONH_SLOPE * V(VDD,VSS) + VOHDELSUP_VIMONH_INTCP }



.PARAM VOLDELSUP_VIMONL_Y1 = {  15m + 15.4m }
.PARAM VOLDELSUP_VIMONL_Y2 = {  10m + 26.5m }

.PARAM VOLDELSUP_VIMONL_SLOPE = { ( VOLDELSUP_VIMONL_Y2-VOLDELSUP_VIMONL_Y1 ) / ( SUP_X2-SUP_X1 ) }
.PARAM VOLDELSUP_VIMONL_INTCP = { VOLDELSUP_VIMONL_Y1 - VOLDELSUP_VIMONL_SLOPE * SUP_X1 }

EVOLDELSUP_VIMONL VOLDELSUP_VIMONL 0 VALUE =
+ { VOLDELSUP_VIMONL_SLOPE * V(VDD,VSS) + VOLDELSUP_VIMONL_INTCP }



.PARAM VOLDELSUP_VIMONH_Y1 = { 230m +  5.0m }
.PARAM VOLDELSUP_VIMONH_Y2 = { 230m + 12.3m }

.PARAM VOLDELSUP_VIMONH_SLOPE = { ( VOLDELSUP_VIMONH_Y2-VOLDELSUP_VIMONH_Y1 ) / ( SUP_X2-SUP_X1 ) }
.PARAM VOLDELSUP_VIMONH_INTCP = { VOLDELSUP_VIMONH_Y1 - VOLDELSUP_VIMONH_SLOPE * SUP_X1 }

EVOLDELSUP_VIMONH VOLDELSUP_VIMONH 0 VALUE =
+ { VOLDELSUP_VIMONH_SLOPE * V(VDD,VSS) + VOLDELSUP_VIMONH_INTCP }





.PARAM VOHDELVIMON_X1 = { 0.4m }
EVOHDELVIMON_Y1 VOHDELVIMON_Y1 0 VALUE = { V(VOHDELSUP_VIMONL) }

.PARAM VOHDELVIMON_X2 = {   4m }
EVOHDELVIMON_Y2 VOHDELVIMON_Y2 0 VALUE = { V(VOHDELSUP_VIMONH) }


EVOHDELVIMON_SLOPE VOHDELVIMON_SLOPE 0 VALUE =
+ { ( V(VOHDELVIMON_Y2)-V(VOHDELVIMON_Y1) ) / ( VOHDELVIMON_X2-VOHDELVIMON_X1 ) }

EVOHDELVIMON_INTCP VOHDELVIMON_INTCP 0 VALUE =
+ { V(VOHDELVIMON_Y1) - V(VOHDELVIMON_SLOPE) * VOHDELVIMON_X1 }

EVOHDELVIMON VOHDELVIMON 0 VALUE =
+ { LIMIT ( V(VOHDELVIMON_SLOPE) * V(VIMON) + V(VOHDELVIMON_INTCP) , 1, 0 ) }





.PARAM VOLDELVIMON_X1 = { 0.4m }
EVOLDELVIMON_Y1 VOLDELVIMON_Y1 0 VALUE = { V(VOLDELSUP_VIMONL) }

.PARAM VOLDELVIMON_X2 = {   4m }
EVOLDELVIMON_Y2 VOLDELVIMON_Y2 0 VALUE = { V(VOLDELSUP_VIMONH) }


EVOLDELVIMON_SLOPE VOLDELVIMON_SLOPE 0 VALUE =
+ { ( V(VOLDELVIMON_Y2)-V(VOLDELVIMON_Y1) ) / ( VOLDELVIMON_X2-VOLDELVIMON_X1 ) }

EVOLDELVIMON_INTCP VOLDELVIMON_INTCP 0 VALUE =
+ { V(VOLDELVIMON_Y1) - V(VOLDELVIMON_SLOPE) * VOLDELVIMON_X1 }

EVOLDELVIMON VOLDELVIMON 0 VALUE =
+ { LIMIT ( V(VOLDELVIMON_SLOPE) * V(VIMON) + V(VOLDELVIMON_INTCP) , 0, -1 ) }




E1 VO 0 VALUE = { LIMIT ( V(VI) , V(VDD) - V(VOHDELVIMON) , V(VSS) - V(VOLDELVIMON) ) }


.ENDS


****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************
****************************************************************************************************





**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT IDEAL_DIODE  A C
+PARAMS: EMCO = 0.01 BRKV = 60 IBRKV = 1M
D1 A C IDIODE
.MODEL IDIODE D(N = {EMCO} BV = {BRKV} IBV = {IBRKV})
.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT GND_FLOAT_NEW  VDD VSS GNDF
*EGNDF  GNDF 0 VALUE = {(V(VDD)+V(VSS))*0.5}

EGNDF_int  GNDF_int 0 VALUE = {(V(VDD)+V(VSS))*0.5}
GRGNDF_int2 GNDF_int GNDF_int2 VALUE = {V(GNDF_int,GNDF_int2)/1E3}
CGNDF_int2  GNDF_int2 0 1E3
EGNDF GNDF 0 GNDF_int2 0 1

.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT AMETER   VI  VO VIMON
+ PARAMS: GAIN = 1
VSENSE VI VO DC = 0
EMETER VIMON 0 VALUE = {I(VSENSE)*GAIN}
.ENDS


**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT VCLAMP_W_CLAW   VDD  VSS  VI  VO VIMON  GNDF VDD_CLP VSS_CLP
+ PARAMS: VMAXIO = 0 VMINIO = 0 SLOPE = 0
EPCLIP  VDD_CLP 0 VALUE = {V(VDD,GNDF) - SLOPE*V(VIMON) - VMAXIO}
ENCLIP  VSS_CLP 0 VALUE = {V(VSS,GNDF) - SLOPE*V(VIMON) + VMINIO}
ECLAMP  VO GNDF VALUE = {LIMIT(V(VI,GNDF), V(VDD_CLP), V(VSS_CLP))}
*ECLAMP  VO 0 VALUE = {LIMIT(V(VI), V(VDD), V(VSS))}

*ECLIP CLP 0 VALUE = { MAX ( V(VDD_CLP), V(VSS_CLP) ) }
*ECLAMP  VO GNDF VALUE = { LIMIT ( V(CLP) * TANH ( V(VI,GNDF) / V(CLP) ), V(VDD_CLP), V(VSS_CLP) ) }

.ENDS


**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT TF   VI  VO  GNDF
+ PARAMS: FZ1 = 10G FZ2 = 10G FZ3 = 10G FZ4 = 10G FZ5 = 10G
+ FP1 = 1 FP2 = 10G FP3 = 10G FP4 = 10G
.PARAM GM = 1M
.PARAM RO = {1/GM}
.PARAM PI = 3.141592

GP1  GNDF VP1 VI GNDF {GM}
GRP1 VP1 GNDF VALUE = {V(VP1,GNDF)/RO}
CP1  VP1 GNDF {1/(2*PI*RO*FP1)}

GP2  GNDF VP2 VP1 GNDF {GM}
GRP2 VP2 GNDF VALUE = {V(VP2,GNDF)/RO}
CP2  VP2 GNDF {1/(2*PI*RO*FP2)}

GP3  GNDF VP3 VP2 GNDF {GM}
GRP3 VP3 GNDF VALUE = {V(VP3,GNDF)/RO}
CP3  VP3 GNDF {1/(2*PI*RO*FP3)}

GP4  GNDF VP4 VP3 GNDF {GM}
GRP4 VP4 GNDF VALUE = {V(VP4,GNDF)/RO}
CP4  VP4 GNDF {1/(2*PI*RO*FP4)}

GZ1  GNDF VZ1 VP4 GNDF {GM}
GRZ1  VZ1 VX1 VALUE =  {V(VZ1,VX1)/RO}
LZ1  VX1 GNDF {RO/(2*PI*FZ1)}

GZ2  GNDF VZ2 VZ1 GNDF {GM}
GRZ2  VZ2 VX2 VALUE =  {V(VZ2,VX2)/RO}
LZ2  VX2 GNDF {RO/(2*PI*FZ2)}

GZ3  GNDF VZ3 VZ2 GNDF {GM}
GRZ3  VZ3 VX3 VALUE =  {V(VZ3,VX3)/RO}
LZ3  VX3 GNDF {RO/(2*PI*FZ3)}

GZ4  GNDF VZ4 VZ3 GNDF {GM}
GRZ4  VZ4 VX4 VALUE =  {V(VZ4,VX4)/RO}
LZ4  VX4 GNDF {RO/(2*PI*FZ4)}

GZ5  GNDF VO VZ4 GNDF {GM}
GRZ5  VO VX5  VALUE = {V(VO,VX5)/RO}
LZ5  VX5 GNDF {RO/(2*PI*FZ5)}

.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT GBW_SLEW_SE_TANH   VIP  VIM  VO_FINAL  GNDF
+ PARAMS: AOL = 100  GBW = 1MEG  SRP = 1MEG  SRN = 1MEG IT = 1M TANHONOFF=1
*On non-tanh, the VILR means +/-VILR
*On tanh, due to the curvature impact, the +/-VILR reaches 75% of the IT and 2*(+/-VILR) reaches 95% of the IT.

.PARAM PI = 3.141592
.PARAM IP = {IF(SRP <= SRN,IT,IT*(SRP/SRN))}
.PARAM IN = {IF(SRN <= SRP,-IT,-IT*(SRN/SRP))}
.PARAM CC = {IF(SRP <= SRN,IT/SRP,IT/SRN)}
.PARAM FP = {GBW/PWR(10,AOL/20)}
.PARAM RC = {1/(2*PI*CC*FP)}
.PARAM GC = {PWR(10,AOL/20)/RC}
*.PARAM SR = {IT/CC}
*.PARAM VILR_SR2PIGBW = {SR/(2*PI*GBW)}
.PARAM VILR_MULT     = 1
.PARAM TANHONOFFINV  = {1-TANHONOFF}

G1          GNDF VO VALUE = { LIMIT ( IT * ( TANHONOFF     * TANH ( GC/IT * 1/VILR_MULT * ( V(VIP) - V(VIM) ) ) +
+                                            TANHONOFFINV  *      ( GC/IT * 1/VILR_MULT * ( V(VIP) - V(VIM) ) )
+                                          ), IP, IN) }

C1          VO GNDF {CC}
GR1          VO GNDF VALUE =  {V(VO,GNDF)/RC}
E1 VO_FINAL 0 VALUE = { VILR_MULT * V(VO,GNDF) }

.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

*.SUBCKT GBW_SLEW_SE_EN   VIP  VIM  VO  GNDF  EN
*+ PARAMS: AOL = 100  GBW = 1MEG  SRP = 1MEG  SRN = 1MEG IT = 1M
*+ VON = 0.5 RSC = 1M
*.PARAM PI = 3.141592
*.PARAM IP = {IF(SRP <= SRN,IT,IT*(SRP/SRN))}
*.PARAM IN = {IF(SRN <= SRP,-IT,-IT*(SRN/SRP))}
*.PARAM CC = {IF(SRP <= SRN,IT/SRP,IT/SRN)}
*.PARAM FP = {GBW/PWR(10,AOL/20)}
*.PARAM RC = {1/(2*PI*CC*FP)}
*.PARAM GC = {PWR(10,AOL/20)/RC}
*G1          GNDF VO VALUE = {IF(V(EN) >= VON,LIMIT(GC*V(VIP,VIM),IP,IN),0)}
*C1          VO GNDF {CC}
*GR1         VO GNDF VALUE =  {IF(V(EN) >= VON,V(VO,GNDF)/RC,V(VO,GNDF)/RSC)}
*GR11        VO GNDF VALUE =  {V(VO,GNDF)/(RC*1000)}
*.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

*.SUBCKT GBW_SLEW_SE_PD   VIP  VIM  VO  GNDF  PD
*+ PARAMS: AOL = 100  GBW = 1MEG  SRP = 1MEG  SRN = 1MEG IT = 1M
*+ VON = 0.5 RSC = 1M
*.PARAM PI = 3.141592
*.PARAM IP = {IF(SRP <= SRN,IT,IT*(SRP/SRN))}
*.PARAM IN = {IF(SRN <= SRP,-IT,-IT*(SRN/SRP))}
*.PARAM CC = {IF(SRP <= SRN,IT/SRP,IT/SRN)}
*.PARAM FP = {GBW/PWR(10,AOL/20)}
*.PARAM RC = {1/(2*PI*CC*FP)}
*.PARAM GC = {PWR(10,AOL/20)/RC}
*G1          GNDF VO VALUE = {IF(V(PD) < VON,LIMIT(GC*V(VIP,VIM),IP,IN),0)}
*C1          VO GNDF {CC}
*GR1         VO GNDF VALUE =  {IF(V(PD) < VON,V(VO,GNDF)/RC,V(VO,GNDF)/RSC)}
*GR11        VO GNDF VALUE =  {V(VO,GNDF)/(RC*1000)}
*.ENDS

**************************************
**
**
**
**
**************************************

.SUBCKT ILOAD_NEW  VDD VSS VIMON
G1 VDD 0 VALUE = {IF(V(VIMON) >= 0,V(VIMON),0)}
G2 VSS 0 VALUE = {IF(V(VIMON) < 0,V(VIMON),0)}
.ENDS

**************************************
**
**
**
**
**************************************

.SUBCKT ILOAD_NEW_PD  VDD VSS VIMON PD
+ PARAMS: VON = 0.5
G1 VDD 0 VALUE = {IF(V(VIMON) >= 0 & V(PD) < VON,V(VIMON),0)}
G2 VSS 0 VALUE = {IF(V(VIMON) < 0 & V(PD) < VON,V(VIMON),0)}
.ENDS

**************************************
**
**
**
**
**************************************

.SUBCKT ILOAD_NEW_EN  VDD VSS VIMON EN
+ PARAMS: VON = 0.5
G1 VDD 0 VALUE = {IF(V(VIMON) >= 0 & V(EN) >= VON,V(VIMON),0)}
G2 VSS 0 VALUE = {IF(V(VIMON) < 0 & V(EN) >= VON,V(VIMON),0)}
.ENDS

**************************************
**
**
**
**
**************************************

.SUBCKT IQ  VDD VSS
+ PARAMS: VON = 0.5 IQQ = 1M  IOFF = 1P
G1 VDD VSS VALUE = {IQQ}
.ENDS

**************************************
**
**
**
**
**************************************

.SUBCKT IQ_PD  VDD VSS PD
+ PARAMS: VON = 0.5 IQQ = 1M  IOFF = 1P
G1 VDD VSS VALUE = {IF(V(PD) < VON,IQQ,IOFF)}
.ENDS

**************************************
**
**
**
**
**************************************

.SUBCKT IQ_EN  VDD VSS EN
+ PARAMS: VON = 0.5 IQQ = 1M  IOFF = 1P
G1 VDD VSS VALUE = {IF(V(EN) >= VON,IQQ,IOFF)}
.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT VCLAMP   VDD  VSS  VI  VO  GNDF PARAMS: VMAX = 0.1 VMIN = 0.1
ECLAMP  VO GNDF VALUE = {LIMIT(V(VI,GNDF),V(VDD,GNDF) - VMAX, V(VSS,GNDF) + VMIN)}
.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT CMR   VDD  VSS  VIP VIM  VOP VOM  GNDF
+ PARAMS: VMAX = 0.1 VMIN = 0.1
ECLAMPP  VOP GNDF VALUE = {LIMIT(V(VIP,GNDF),V(VDD,GNDF) - VMAX, V(VSS,GNDF) + VMIN)}
ECLAMPM  VOM GNDF VALUE = {LIMIT(V(VIM,GNDF),V(VDD,GNDF) - VMAX, V(VSS,GNDF) + VMIN)}
.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT ZOUT_1   VI VO  GNDF
+ PARAMS: FZ1 = 1.4 FZ2 = 4.7E6  FZ3 = 91E6
+ FP1 = 212K FP2 = 3.5K FEQ = 1.4 RO = 5K
.PARAM GM = 1M
.PARAM RX = {1/GM}
.PARAM PI = 3.141592

GRI  GNDF VEQ VALUE = {V(GNDF,VEQ)/10MEG}
GRF  VIZ  VEQ VALUE = {V(VIZ,VEQ)/10MEG}
CF  VIZ  VEQ {1/(2*PI*10E6*FEQ)}
EQ  VIZ GNDF VI VEQ 100K

E0  VP0 GNDF VIZ VO 1N

GZ1  GNDF VZ1 VP0 GNDF {GM}
GRZ1  VZ1 VX1 VALUE =  {V(VZ1,VX1)/RX}
LZ1  VX1 GNDF {RX/(2*PI*FZ1)}

EP1  VP1 GNDF VZ1 GNDF 1
GRP1  VP1 VP1X VALUE =  {V(VP1,VP1X)/RX}
CP1  VP1X GNDF {1/(2*PI*RX*FP1)}

GZ2  GNDF VZ2 VP1X GNDF {GM}
GRZ2  VZ2 VX2 VALUE =  {V(VZ2,VX2)/RX}
LZ2  VX2 GNDF {RX/(2*PI*FZ2)}

EP2  VP2 GNDF  VZ2 GNDF 1
GRP2  VP2 VP2X VALUE =  {V(VP2,VP2X)/RX}
CP2  VP2X GNDF {1/(2*PI*RX*FP2)}

GZ3  GNDF VZ3 VP2X GNDF {GM}
GRZ3  VZ3 VX3 VALUE =  {V(VZ3,VX3)/RX}
LZ3  VX3 GNDF {RX/(2*PI*FZ3)}

E1   VOX GNDF VZ3 GNDF 1G

GR1   VOX VO VALUE = {V(VOX,VO)/RO}

.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT ZOUT_2   VI VO

VZ  VI  VO  0
RD  GNDF GNDF 1

.ENDS


**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT CMRR   VI  VO  GNDF PARAMS: CMRR = 130 FCMRR = 1.6K
.PARAM PI = 3.141592
.PARAM RCMRR = 1
.PARAM GCMRR = {PWR(10,-CMRR/20)/RCMRR}
.PARAM LCMRR = {RCMRR/(2*PI*FCMRR)}
G1  GNDF 1 VI GNDF {GCMRR}
R1  1 2 {RCMRR}
L1  2 GNDF {LCMRR}
E1  VI VO 1 GNDF 1
.ENDS


**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT CMRR_NEW   VI  VO  GNDF PARAMS: CMRR = 130 FCMRR = 1.6K
.PARAM PI = 3.141592
.PARAM RCMRR = 1
.PARAM GCMRR = {PWR(10,-CMRR/20)/RCMRR}
.PARAM LCMRR = {RCMRR/(2*PI*FCMRR)}
G1  GNDF 1 VI GNDF {GCMRR}
R1  1 2 {RCMRR}
L1  2 GNDF {LCMRR}

EA  101 GNDF 1 GNDF 1
*RA 101 102 1e6
GRA  101 102 VALUE = {V(101,102)/1e3}
CA  102 GNDF 1e6
EB  1 1a VALUE = {V(102,GNDF)}

E1  VI VO 1a GNDF 1
*E1  VI VO 1 GNDF 1

.ENDS



**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT PSRR_NEW2   VDD  VSS  VI  VO  GNDF
+ PARAMS: PSRRP = 130 FPSRRP = 1.6
+ PSRRN = 130 FPSRRN = 1.6
.PARAM PI = 3.141592
.PARAM RPSRRP = 1
.PARAM GPSRRP = {PWR(10,-PSRRP/20)/RPSRRP}
.PARAM LPSRRP = {RPSRRP/(2*PI*FPSRRP)}
.PARAM RPSRRN = 1
.PARAM GPSRRN = {PWR(10,-PSRRN/20)/RPSRRN}
.PARAM LPSRRN = {RPSRRN/(2*PI*FPSRRN)}

G1  GNDF 1 VDD GNDF {GPSRRP}
R1  1 2 {RPSRRP}
L1  2 GNDF {LPSRRP}

EA  101 GNDF 1 GNDF 1
GRA  101 102 VALUE = { V(101,102)/1e6 }
CA  102 GNDF 1e3
EB  1 1a VALUE = {V(102,GNDF)}


G2  GNDF 3 VSS GNDF {GPSRRN}
R2  3 4 {RPSRRN}
L2  4 GNDF {LPSRRN}

EC  301 GNDF 3 GNDF 1
GRC  301 302 VALUE = { V(301,302)/1e6 }
CC  302 GNDF 1e3
ED  3 3a VALUE = {V(302,GNDF)}



E1  VO VI VALUE = {V(1a,GNDF) + V(3a,GNDF)}
C3  VDD VSS 10P
.ENDS


**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT PSRR_NEW   VDD  VSS  VI  VO  GNDF PARAMS: PSRR = 130 FPSRR = 1.6
.PARAM PI = 3.141592
.PARAM RPSRR = 1
.PARAM GPSRR = {PWR(10,-PSRR/20)/RPSRR}
.PARAM LPSRR = {RPSRR/(2*PI*FPSRR)}
G1  GNDF 1 VDD VSS {GPSRR}
R1  1 2 {RPSRR}
L1  2 GNDF {LPSRR}

EA  101 GNDF 1 GNDF 1
GRA  101 102 VALUE = { V(101,102)/1e6 }
CA  102 GNDF 1e3
EB  1 1a VALUE = {V(102,GNDF)}

E1  VO VI 1a GNDF 1
C2  VDD VSS 10P


.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT PSRR   VDD  VSS  VI  VO  GNDF
+ PARAMS: PSRRP = 130 FPSRRP = 1.6
+ PSRRN = 130 FPSRRN = 1.6
.PARAM PI = 3.141592
.PARAM RPSRRP = 1
.PARAM GPSRRP = {PWR(10,-PSRRP/20)/RPSRRP}
.PARAM LPSRRP = {RPSRRP/(2*PI*FPSRRP)}
.PARAM RPSRRN = 1
.PARAM GPSRRN = {PWR(10,-PSRRN/20)/RPSRRN}
.PARAM LPSRRN = {RPSRRN/(2*PI*FPSRRN)}
G1  GNDF 1 VDD GNDF {GPSRRP}
R1  1 2 {RPSRRP}
L1  2 GNDF {LPSRRP}

G2  GNDF 3 VSS GNDF {GPSRRN}
R2  3 4 {RPSRRN}
L2  4 GNDF {LPSRRN}

E1  VO VI VALUE = {V(1,GNDF) + V(3,GNDF)}
C3  VDD VSS 10P
.ENDS










**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

* BEGIN PROG NSE FEMTO AMP/RT-HZ
.SUBCKT FEMT  1 2 PARAMS: NLFF = 0.1 FLWF = 0.001 NVRF = 0.1
* BEGIN SETUP OF NOISE GEN - FEMPTOAMPS/RT-HZ
* INPUT THREE VARIABLES
* SET UP INSE 1/F
********************
* FA/RHZ AT 1/F FREQ
* NLFF
********************
* FREQ FOR 1/F VAL
* FLWF
********************
* SET UP INSE FB
* FA/RHZ FLATBAND
* NVRF
********************
* END USER INPUT
* START CALC VALS
.PARAM GLFF={PWR(FLWF,0.25)*NLFF/1164}
.PARAM RNVF={1.184*PWR(NVRF,2)}
.MODEL DVNF D KF={PWR(FLWF,0.5)/1E11} IS=1.0E-16
* END CALC VALS
I1 0 7 10E-3
I2 0 8 10E-3
D1 7 0 DVNF
D2 8 0 DVNF
E1 3 6 7 8 {GLFF}
R1 3 0 1E9
R2 3 0 1E9
R3 3 6 1E9
E2 6 4 5 0 10
R4 5 0 {RNVF}
R5 5 0 {RNVF}
R6 3 4 1E9
R7 4 0 1E9
G1 1 2 3 4 1E-6
C1 1 0 1E-15
C2 2 0 1E-15
C3 1 2 1E-15
.ENDS
* END PROG NSE FEMTO AMP/RT-HZ

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

* BEGIN PROG NSE NANO VOLT/RT-HZ
.SUBCKT VNSE  1 2 PARAMS: NLF = 10 FLW = 4  NVR = 4.6
* BEGIN SETUP OF NOISE GEN - NANOVOLT/RT-HZ
* INPUT THREE VARIABLES
* SET UP VNSE 1/F
********************
* NV/RHZ AT 1/F FREQ
* NLF
********************
* FREQ FOR 1/F VAL
* FLW
********************
* SET UP VNSE FB
* NV/RHZ FLATBAND
* NVR
********************
* END USER INPUT
* START CALC VALS
.PARAM GLF={PWR(FLW,0.25)*NLF/1164}
.PARAM RNV={1.184*PWR(NVR,2)}
.MODEL DVN D KF={PWR(FLW,0.5)/1E11} IS=1.0E-16
* END CALC VALS
I1 0 7 10E-3
I2 0 8 10E-3
D1 7 0 DVN
D2 8 0 DVN
E1 3 6 7 8 {GLF}
R1 3 0 1E9
R2 3 0 1E9
R3 3 6 1E9
E2 6 4 5 0 10
R4 5 0 {RNV}
R5 5 0 {RNV}
R6 3 4 1E9
R7 4 0 1E9
E3 1 2 3 4 1
C1 1 0 1E-15
C2 2 0 1E-15
C3 1 2 1E-15
.ENDS
* END PROG NSE NANOV/RT-HZ

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT INPUT   VIP  VIN  VOP  VON  GNDF PARAMS: RCM = 1  CCM = 100F  CDM = 100F
C1          VOP GNDF {CCM}
C2          VON GNDF {CCM}
C3          VOP VON {CDM}
G1          VIP VOP VALUE =  {V(VIP,VOP)/RCM}
G2          VIN VON VALUE = {V(VIN,VON)/RCM}
.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT INPUT_NEW   VIP  VIN  VOP  VON  GNDF PARAMS: RCM = 1  CCM = 100F  CDM = 100F
C1          VOP GNDF {CCM}
C2          VON GNDF {CCM}
C3          VOP VON {CDM}
R1          VIP VOP {RCM}
R2          VIN VON {RCM}
.ENDS


**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT OUT_CURRENT_CLAMP  IN  OUT
+PARAMS: RSER = 1 IMAX = 10M  IMIN = 10M
GRES  IN OUT VALUE = {LIMIT(V(IN,OUT)/RSER,IMAX,-IMIN)}
.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT OUT_CURRENT_CLAMP_PD  IN  OUT  PD
+PARAMS: RSER = 1 ROFF = 1G   VON = 0.5 IMAX = 10M  IMIN = 10M
GRES  IN OUT VALUE = {LIMIT(IF(V(PD) < VON,1,0)*V(IN,OUT)/RSER
+ + IF(V(PD) < VON,0,1)*V(IN,OUT)/ROFF,IMAX,-IMIN)}
.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT OUT_CURRENT_CLAMP_EN  IN  OUT  EN
+PARAMS: RSER = 1 ROFF = 1G   VON = 0.5 IMAX = 10M  IMIN = 10M
GRES  IN OUT VALUE = {LIMIT(IF(V(EN) >= VON,1,0)*V(IN,OUT)/RSER
+ + IF(V(EN) >= VON,0,1)*V(IN,OUT)/ROFF,IMAX,-IMIN)}
.ENDS

**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT IBIAS VIP  VIM  VDD  VSS
+ PARAMS: IBIASP = 1e-12 IBIASN = 1e-12
IBP  VDD  VIP  {IBIASP}
IBN  VSS  VIM  {IBIASN}
.ENDS


**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT IBIAS_NEW VIP  VIM  NODE1  NODE2
+ PARAMS: IBIASP = 1e-12 IBIASN = 1e-12
IBP  VIP NODE1   {IBIASP}
IBN  VIM NODE2   {IBIASN}
.ENDS


**************************************
**                                  **
**                                  **
**                                  **
**                                  **
**************************************

.SUBCKT IBIAS_NEW2 VIP  VIM  NODE1  NODE2
+ PARAMS: IBIAS = 1e-11 IBIASOFFSET = 1e-12
.PARAM IBIASP = { IBIAS + IBIASOFFSET/2 }
.PARAM IBIASN = { IBIAS - IBIASOFFSET/2 }

IBP  VIP NODE1   {IBIASP}
IBN  VIM NODE2   {IBIASN}
.ENDS


